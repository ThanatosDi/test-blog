{
    "version": "https://jsonfeed.org/version/1",
    "title": "丁丁的亂寫空間",
    "subtitle": "",
    "icon": "https://blog.kawai.moe/assets/favicon.ico",
    "description": "隨意寫寫，筆記記錄，以免忘記，後悔莫及",
    "home_page_url": "https://blog.kawai.moe",
    "items": [
        {
            "id": "https://blog.kawai.moe/synology/synology-nas-%E4%BD%BF%E7%94%A8-cloudflared-tunnel-%E5%BB%BA%E7%AB%8B%E5%B0%8D%E5%A4%96%E9%80%A3%E7%B7%9A/",
            "url": "https://blog.kawai.moe/synology/synology-nas-%E4%BD%BF%E7%94%A8-cloudflared-tunnel-%E5%BB%BA%E7%AB%8B%E5%B0%8D%E5%A4%96%E9%80%A3%E7%B7%9A/",
            "title": "Synology NAS 使用 CloudFlared tunnel 建立對外連線",
            "date_published": "2024-01-04T15:47:20.000Z",
            "content_html": "",
            "tags": [
                "synology",
                "cloudflare",
                "Synology",
                "NAS",
                "反向代理",
                "tunnel",
                "zero trust"
            ]
        },
        {
            "id": "https://blog.kawai.moe/windows/hyperx-quadcast-%E8%81%B2%E9%9F%B3%E5%BE%88%E5%B0%8F/",
            "url": "https://blog.kawai.moe/windows/hyperx-quadcast-%E8%81%B2%E9%9F%B3%E5%BE%88%E5%B0%8F/",
            "title": "HyperX QuadCast 聲音很小",
            "date_published": "2022-12-17T07:37:07.000Z",
            "content_html": "<h1 id=\"HyperX-QuadCast-聲音很小\"><a href=\"#HyperX-QuadCast-聲音很小\" class=\"headerlink\" title=\"HyperX QuadCast 聲音很小\"></a>HyperX QuadCast 聲音很小</h1><p>因為正在服役的 HyperX cloud 耳麥的麥克風已經半死不活了，趁著 1212 的時候坑了一隻 HyperX QuadCast</p>\n<p>然後因為是桌上型的 mic 所以距離嘴巴其實有一段不小的距離(中間還隔了鍵盤)<br><img loading=\"lazy\" data-src=\"/assets/images/windows/post/hyperx_quadcast.jpg\" alt=\"image\"></p>\n<p>但在平時白天被朋友說講話的聲音很小聲，就整個很困惑，明明已經把增益轉到最大了還小聲?!<br>然後就看到這篇文章<br>但請各位小心服用 畢竟會對硬體造成什麼影響目前我也不知道<br>:::warning<br>如果您的設備直接或間接損壞，我拒絕承擔任何責任，請自行考慮好再使用~<br>:::<br><a href=\"https://www.reddit.com/r/HyperX/comments/97s0ez/hyperx_cloud_2_quiet_mic_solved/\">來源文章</a></p>\n<p>簡單濃縮來說就是使用軟體 <code>Equalizer APO</code> 和其擴充套件 <code>Peace</code> 來提高麥克風音量</p>\n<p>實際的操作如下…</p>\n<ol>\n<li><p>安裝 Equalizer APO<br>一般來說只要下一步下一步安裝完之後會跳出 Configurator 要求選擇哪個裝置，例如我是要讓 HyperX QuadCast 就選擇這個裝置<br>如果沒有跳出來則打開程式目錄並啟動 Configurator.exe，轉到”捕獲設備”並選擇&#x2F;勾選麥克風</p>\n<div class=\"links\"><div class=\"item\" title=\"Equalizer APO (sourceforge)\"><a href=\"https://sourceforge.net/projects/equalizerapo/\" class=\"image\" data-background-image=\"https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg\"></a>\n        <div class=\"info\">\n        <a href=\"https://sourceforge.net/projects/equalizerapo/\" class=\"title\">Equalizer APO (sourceforge)</a>\n        <p class=\"desc\">Equalizer APO 下載頁面</p>\n        </div></div></div>\n</li>\n<li><p>安裝 Peace</p>\n<div class=\"links\"><div class=\"item\" title=\"Peace Equalizer, interface Equalizer APO (sourceforge)\"><a href=\"https://sourceforge.net/projects/peace-equalizer-apo-extension/\" class=\"image\" data-background-image=\"https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg\"></a>\n        <div class=\"info\">\n        <a href=\"https://sourceforge.net/projects/peace-equalizer-apo-extension/\" class=\"title\">Peace Equalizer, interface Equalizer APO (sourceforge)</a>\n        <p class=\"desc\">Peace Equalizer, interface Equalizer APO 下載頁面</p>\n        </div></div></div>\n<p>Peace 就比較簡單有中文介面，安裝完之後選擇 “簡潔介面”</p>\n<p>首先從右下角的菜單中選擇您的麥克風(預設為”全部音訊設備”)<br>然後就可以在最上面調整想要大聲還是小聲<br>最後再按完成就完成調整麥克風大小聲拉~<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/208232169-88e470a5-186b-4c95-929c-91e2d125c2fa.png\" alt=\"image\"></p>\n</li>\n</ol>\n",
            "tags": [
                "windows",
                "windows",
                "麥克風很小聲",
                "HyperX",
                "QuadCast",
                "HyperX QuadCast"
            ]
        },
        {
            "id": "https://blog.kawai.moe/games/minecraft/minecraft-%E5%AE%89%E8%A3%9D-fabric/",
            "url": "https://blog.kawai.moe/games/minecraft/minecraft-%E5%AE%89%E8%A3%9D-fabric/",
            "title": "Minecraft 安裝 fabric",
            "date_published": "2022-09-15T16:00:00.000Z",
            "content_html": "<h1 id=\"前言-廢話w\"><a href=\"#前言-廢話w\" class=\"headerlink\" title=\"前言(廢話w)\"></a>前言(廢話w)</h1><p>玩 minecraft 到最後一定會想玩玩廣大開發者開發的各種 mods<br>而現在整個 minecraft vanilla 版本的 mod loader 就兩個</p>\n<ul>\n<li>fabric</li>\n<li>forge</li>\n</ul>\n<p>而這邊介紹 fabric 的安裝流程</p>\n<h1 id=\"準備好-minecraft-客戶端\"><a href=\"#準備好-minecraft-客戶端\" class=\"headerlink\" title=\"準備好 minecraft 客戶端\"></a>準備好 minecraft 客戶端</h1><p>當你下載好了客戶端並且看到下方的畫面的時候就先放著不理它，這邊就已經可以準備安裝 fabric<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190607741-a1ffe80f-64b7-48bf-a8d9-7e1457cf48b3.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n<h1 id=\"下載-fabric\"><a href=\"#下載-fabric\" class=\"headerlink\" title=\"下載 fabric\"></a>下載 fabric</h1><p>:::info<br>前往 <a href=\"https://fabricmc.net/use/installer/\">fabric</a> 下載 fabric<br>:::</p>\n<p>開啟頁面後可以選擇下載 jar 檔或 exe 檔，兩個都可以使用<br>下載後會看到這個 UI<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190611089-abb290be-78ed-4eae-b27a-681087498121.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n<p>[:star2:注意1]{.label .danger} 確定上方頁籤是: “客戶端”<br>[:star2:注意2]{.label .danger} 確定 “Minecraft版本” 是你即將遊玩的版本號<br>[:star2:注意3]{.label .danger} 確定 “安裝位置” 這個位置如果沒有<strong>刻意</strong>去做調整就預設即可<br>[:star2:注意4]{.label .danger} 確定 “建立設定檔” 這個選項有打勾</p>\n<p><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190611323-9b791f77-86ea-4a0d-aa8c-80dd51f15b89.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n<p>接著把 minecraft 客戶端關閉，並且在 <em><strong>fabric 安裝程式</strong></em>中直接按下安裝就會開始安裝 fabric</p>\n<p>等待安裝完後再開啟 minecraft 客戶端，就會看到新的設定檔</p>\n<p><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190612152-41def0bb-276e-4dac-ad08-4d3bfd53f482.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n<h1 id=\"安裝-mods\"><a href=\"#安裝-mods\" class=\"headerlink\" title=\"安裝 mods\"></a>安裝 mods</h1><p>安裝 mods 很簡單，只要在 minecraft 客戶端上方的頁籤切換成 <strong>“安裝檔”</strong><br>並懸停在 fabric 的設定檔上，後方就會有三個按鈕可以按，點擊第二個會開啟資料夾<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190612475-075b2c2e-b548-4fa7-bbe0-94cf6472d77b.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n<p>此時只要將你下載的 fabric mods 放入 mods 資料夾內，重開遊戲就會自動載入 mods 了<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/190613055-b20118fc-db4e-4690-908f-0a632cee36d4.png\" alt=\"image\">{width&#x3D;”600px”}</p>\n",
            "tags": [
                "games",
                "minecraft",
                "games",
                "minecraft"
            ]
        },
        {
            "id": "https://blog.kawai.moe/synology/dsm-photo%E3%80%81drive-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "url": "https://blog.kawai.moe/synology/dsm-photo%E3%80%81drive-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "title": "DSM photo、drive 反向代理",
            "date_published": "2022-08-25T15:47:20.000Z",
            "content_html": "<h1 id=\"DSM-photo、drive-反向代理\"><a href=\"#DSM-photo、drive-反向代理\" class=\"headerlink\" title=\"DSM photo、drive 反向代理\"></a>DSM photo、drive 反向代理</h1><p>預設 Synology 的 NAS photo 和 drive 兩個應用程式的 port 是與 DSM 相同<br>[http 5000]{.label .info}<br>[https 5001]{.label .info}<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186729195-d5316b2c-c527-4d59-85d1-aec53e80fc21.png\" alt=\"image\"><br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186729301-f985e8ed-bb6d-4a88-8980-1c88c094db85.png\" alt=\"image\"><br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186729388-436a4809-a905-4302-bd24-2fa64561f4f2.png\" alt=\"image\"></p>\n<p>:::info<br>詳細的套件對應 port 可以參考 <a href=\"https://kb.synology.com/zh-tw/DSM/tutorial/What_network_ports_are_used_by_Synology_services\">Synology 官方的文件</a><br>:::</p>\n<p>所以今天如果我們要在外面使用<strong>自有網域</strong>透過網際網路存取 photo 和 drive 有兩種方式</p>\n<ol>\n<li>利用群輝自帶的 QuickConnect</li>\n<li>利用反向代理</li>\n</ol>\n<p>第一個就不在此敘述如何設定，故這裡要使用的是第二個，利用反向代理</p>\n<h2 id=\"設定-photo-和-drive-的-port\"><a href=\"#設定-photo-和-drive-的-port\" class=\"headerlink\" title=\"設定 photo 和 drive 的 port\"></a>設定 photo 和 drive 的 port</h2><p>首先我們要先修改 photo 和 drive 的應用程式所使用的 port<br>進到 <code>DSM -&gt; 控制台 -&gt; 登入入口 -&gt; 應用程式 -&gt; Synology Drive</code><br>在自訂連接埠設定 https 的 port 值，<br>:::warning<br>這邊設定的 http 或 https 和 port 會影響到後續的反向代理設定<br>這邊舉例使用 https 並且連接埠 (port) 為 20000<br>:::<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186730230-e3fd170c-a3b0-4f76-b340-e07ac31ee40c.png\" alt=\"image\"></p>\n<h2 id=\"設定反向代理\"><a href=\"#設定反向代理\" class=\"headerlink\" title=\"設定反向代理\"></a>設定反向代理</h2><p>接著到 <code>控制台 -&gt; 登入入口 -&gt; 進階 -&gt; 反向代理</code> 新增反向代理<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186730915-278f431b-a7ad-4f1c-a234-17f0acb0c72d.png\" alt=\"image\"></p>\n<p><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186731409-e2085639-8d89-4c1f-aabb-697e8d666ae6.png\" alt=\"image\"></p>\n<h3 id=\"反向代理-來源\"><a href=\"#反向代理-來源\" class=\"headerlink\" title=\"反向代理 - 來源\"></a>反向代理 - 來源</h3><p>[:star2:反向代理名稱]{.label .danger} 輸入一個你自己懂得這是什麼服務的名字<br>[:star2:通訊協定]{.label .danger} 在 <a href=\"#%E8%A8%AD%E5%AE%9A-photo-%E5%92%8C-drive-%E7%9A%84-port\">設定 photo 和 drive 的 port</a> 的地方所設定的連接埠 (port) 所對應的協定，這邊舉例使用 https 並且連接埠 (port) 為 20000<br>[:star2:主機名稱]{.label .danger} 因為是 NAS 本機服務，所以這邊都是使用 <code>localhost</code><br>[:star2:連接埠]{.label .danger} 在 <a href=\"#%E8%A8%AD%E5%AE%9A-photo-%E5%92%8C-drive-%E7%9A%84-port\">設定 photo 和 drive 的 port</a> 的地方所設定的連接埠 (port)，這邊舉例為 20000</p>\n<h3 id=\"反向代理-目的地\"><a href=\"#反向代理-目的地\" class=\"headerlink\" title=\"反向代理 - 目的地\"></a>反向代理 - 目的地</h3><p>[:star2:通訊協定]{.label .danger} 這邊建議都選擇 <code>https</code> 可以到 <code>控制台 -&gt; 安全性 -&gt; 憑證</code> 申請一個 TLS 證書<br>[:star2:主機名稱]{.label .danger} 你的網域，例如我要用 <code>photo.example.com</code> 開啟 photo 服務 就在此輸入 <code>photo.example.com</code><br>[:star2:連接埠]{.label .danger} 如果第一個<strong>通訊協定</strong>選擇為 https 這邊就要是 443；http 為 80<br>整體設定後就如下圖<br><img loading=\"lazy\" data-src=\"https://user-images.githubusercontent.com/12424898/186734520-b1c15620-0080-4329-a819-0163a212ee2d.png\" alt=\"image\"></p>\n<p>設定完成後就可以透過自己的網域訪問服務啦🎉</p>\n",
            "tags": [
                "synology",
                "Synology",
                "NAS",
                "DSM",
                "Synology photo",
                "Synology drive",
                "反向代理"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/let-s-encrypt-%E8%AD%89%E6%9B%B8%E7%B0%BD%E7%BD%B2%E5%A4%B1%E6%95%97-bad-handshake/",
            "url": "https://blog.kawai.moe/linux/let-s-encrypt-%E8%AD%89%E6%9B%B8%E7%B0%BD%E7%BD%B2%E5%A4%B1%E6%95%97-bad-handshake/",
            "title": "let's encrypt 證書簽署失敗 bad handshake",
            "date_published": "2021-12-15T16:00:00.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"/assets/images/linux/cover/hotlink-ok/LetsEncrypt-SocialShare.png\"></p>\n<h1 id=\"let’s-encrypt-證書簽署失敗-bad-handshake\"><a href=\"#let’s-encrypt-證書簽署失敗-bad-handshake\" class=\"headerlink\" title=\"let’s encrypt 證書簽署失敗 bad handshake\"></a>let’s encrypt 證書簽署失敗 bad handshake</h1><p>當平時自動運作的 Let’s encrypt都正常運作時，最近要簽署新證書卻發現下 <code>certbot renew</code> 無法正常簽署並出現錯誤 <strong>unexpected error: bad handshake</strong> 要怎麼處理這問題呢</p>\n<p>其實這問題在先前官方有公告要調整 root 證書<a href=\"https://letsencrypt.org/zh-tw/docs/dst-root-ca-x3-expiration-september-2021/\">公告</a>，原先使用的 DST Root CA X3 將於 2021 年 9 月 30 日到期，而新的 ISRG Root X1 在舊裝置上並不存在，所以導致切換成 ISRG Root X1 而舊裝置找不到該憑證就導致 TLS handshake 失敗  </p>\n<p>最簡單就是更新套件，而有些主機可能因為歷史包袱不好做套件更新等等處理，所以就手動新增 ISRG Root X1 證書來驗證</p>\n<p>首先先測試看看能不能訪問新的驗證端API</p>\n<pre><code class=\"bash\">curl -v https://acme-v02.api.letsencrypt.org/directory\n</code></pre>\n<p>回傳的結果應該會有個 <code>SSL certificate problem: unable to get local issuer certificate</code> </p>\n<p>接著到官網這邊取得 <a href=\"https://letsencrypt.org/zh-tw/certificates/\">ISRG Root X1 證書</a></p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/Snipaste_2021-12-16_17-45-15.jpg\" alt=\"ISRG Root X1 證書\"></p>\n<p>將裡面的文字複製起來，並且到主機中的 <code>/usr/local/share/ca-certificates</code> 建立一個檔案 <code>isrgrootx1.pem</code></p>\n<p>接著將內容貼上該檔案中，然後執行 <code>sudo update-ca-certificates</code> 正常會顯示 <code>1 add</code>，此時在進行 <code>certbot renew</code> 就可以正常執行了</p>\n",
            "tags": [
                "linux",
                "Linux",
                "let's encrypt",
                "bad handshake"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/centos-%E5%AE%89%E8%A3%9D-webmin/",
            "url": "https://blog.kawai.moe/linux/centos-%E5%AE%89%E8%A3%9D-webmin/",
            "title": "CentOS 安裝 Webmin",
            "date_published": "2020-05-15T16:00:00.000Z",
            "content_html": "<p>利用 yum 安裝 Webmin</p>\n<p>首先先下載 repo 到 &#x2F;etc&#x2F;yum.repos.d</p>\n<pre><code class=\"shell\">cd /etc/yum.repos.d\nrpm --import https://raw.githubusercontent.com/ThanatosDi/Install-Webmin/master/key.asc\n\nwget https://raw.githubusercontent.com/ThanatosDi/Install-Webmin/master/webmin.repo\n</code></pre>\n<p>接著 yum install 安裝即可</p>\n<pre><code class=\"bash\">yum install webmin -y\n</code></pre>\n",
            "tags": [
                "linux",
                "Linux",
                "Webmin",
                "CentOS"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/centos7-%E5%AE%89%E8%A3%9D%E5%A4%9A%E7%89%88%E6%9C%AC-python/",
            "url": "https://blog.kawai.moe/linux/centos7-%E5%AE%89%E8%A3%9D%E5%A4%9A%E7%89%88%E6%9C%AC-python/",
            "title": "Centos7 安裝多版本 Python",
            "date_published": "2019-09-28T16:00:00.000Z",
            "content_html": "<p>雖然現在 Python 最新版本已經到了 3.7 但是 Linux 上還是有蠻多的套件使用 Python2，加上 Python2.7 的支援期間只到 2020(不知是否會再延長)，但越來越多的開發者已經轉移版本到 3.x 了<br>那要如何保留原始版本的 Python 另外再安裝 Python3.x 呢?<br>首先要有 ROOT 權限或者 sudo (廢話w<br>然後到 <a href=\"https://www.python.org/downloads/\">Python 官網</a>找你要下載的版本連結<br>ps: 這邊範例為下載最新版本 3.7.4<br>如果要安裝多個 3.x 建議還是寫完整版號</p>\n<pre><code class=\"bash\">cd /tmp\n# 下載編譯包\nwget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz\n# 解壓縮編譯包\ntar xf Python-3.7.4.tar.xz -C /usr/local/src/\n# 開始編譯並設定預設安裝路徑(/usr/local/python3) 可以自己設定\n./configure --prefix=/usr/local/python3\n# 安裝\nmake &amp;&amp; make install\n</code></pre>\n<p>大致上到這邊就是完成安裝，但是不管用 python3 python3.7 python37 都是回應 command not found<br>很簡單因為剛剛安裝完沒有在預設的 command 資料夾中<br>所以我們要建立軟連結<br>PS: 這邊也是做個範例</p>\n<pre><code class=\"bash\">ln -s /usr/local/python3/bin/python3 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n</code></pre>\n<p>這樣子你再執行 <code>python3 -V</code> 照理就會出現 Python3.x.x 的訊息，同時執行 <code>python -V</code> 會得到 Python2.7.5<br>這樣就安裝好其他版本的 Python 也保留預設的 Python2.7</p>\n",
            "tags": [
                "linux",
                "Python",
                "Linux",
                "Centos7"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/phpmyadmin-%E5%95%9F%E7%94%A82fa/",
            "url": "https://blog.kawai.moe/linux/phpmyadmin-%E5%95%9F%E7%94%A82fa/",
            "title": "phpMyAdmin 啟用2FA",
            "date_published": "2019-09-24T16:00:00.000Z",
            "content_html": "<h1 id=\"phpMyAdmin-啟用2FA\"><a href=\"#phpMyAdmin-啟用2FA\" class=\"headerlink\" title=\"phpMyAdmin 啟用2FA\"></a>phpMyAdmin 啟用2FA</h1><p>最近把伺服器的 phpMyAdmin 升級到 4.9.1<br>然後就在設定裡面發現可以開啟 2FA 的選項  </p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/phpmyadmin-enable-2fa.png\" alt=\"phpMyAdmin 中啟用 2FA\"></p>\n<p>後來去看看 documentation 之後發現其實在 4.8.0(2018&#x2F;4&#x2F;19) 就加入這個功能了，沒錯啦我就是沒在更新，因為之前有過更新完系統直接掛掉的陰影存在，但其實為了安全性還是要好好的更新套件跟軟體XD</p>\n<p>如果直接從 phpMyAdmin 官網下載下來的 zip 檔其實可以直接啟動 2FA 功能，那如果是直接 git 下來的就還要另外安裝一些套件，這邊不加以闡述</p>\n<p>啟用 2FA 非常簡單，只要選擇第二項 “認證應用程式 (2FA)”<br>然後按下 “設定雙因素認證”</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/phpmyadmin-enable-2fa-2.png\" alt=\"phpMyAdmin 中啟用 2FA\"></p>\n<p>接下來就會看到一個 QRcode 跟密碼</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/phpmyadmin-enable-2fa-3.png\" alt=\"phpMyAdmin 中啟用 2FA\"></p>\n<p>這邊就要用到你的手機了，使用 Google Two Factor Authentication 或者 Authy 兩個應用程式都可以，掃描 QRCode 之後並輸入該 2FA 的驗證就可以開啟了～  </p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/phpmyadmin-enable-2fa-finish.png\" alt=\"phpMyAdmin 中啟用 2FA\"></p>\n<p>那接下來就是緊急處理，如果是用 Google Two Factor Authentication 的使用者要注意，在做手機更換的時候 <strong>一定!一定!一定!一定!</strong> 一定要先把 2FA 先解除在做更換手機的動作，不然會導致無法登入 phpMyAdmin </p>\n<p>那如果真的很不幸你真的忘記了，是有解決辦法<br>先用 ssh 登入你的 mysql<br>PS: 這邊是範例，忘記 root 的 2FA，請依照你自己的伺服器做處理  </p>\n<pre><code class=\"bash\">mysql -u root -p # 使用 root 登入 mysql\n\nSELECT * FROM `phpmyadmin`.`pma__userconfig` WHERE `username` = &#39;root&#39;;\n</code></pre>\n<p>之後會看到一些資料</p>\n<pre><code class=\"bash\">| root     | 2019-09-25 16:21:20 | &#123;&quot;Server\\/hide_db&quot;:&quot;information_schema|mysql|performance_schema|information_schema&quot;,&quot;lang&quot;:&quot;zh_TW&quot;,&quot;collation_connection&quot;:&quot;utf8mb4_unicode_ci&quot;,&quot;Console\\/Mode&quot;:&quot;collapse&quot;,&quot;DefaultConnectionCollation&quot;:&quot;utf8_unicode_ci&quot;,&quot;2fa&quot;:&#123;&quot;backend&quot;:&quot;application&quot;,&quot;settings&quot;:&#123;&quot;secret&quot;:&quot;KKASIRHQ904U2KS918JSEBTJ9132459U1902&quot;&#125;&#125;,&quot;ThemeDefault&quot;:&quot;pmahomme&quot;&#125; |\n</code></pre>\n<p>最重要最重要的就是在後面的 JSON 資料中的 “2fa”<br>裡面有個 “secret” 把這段輸入到 Google Two Factor Authentication 中就可以繼續使用了<br>PS: 這邊的範例是假的，當然沒有這麼的長</p>\n",
            "tags": [
                "linux",
                "Linux",
                "2FA",
                "phpMyAdmin"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/nginx-cloudflare-%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E7%9C%9F%E5%AF%A6ip/",
            "url": "https://blog.kawai.moe/linux/nginx-cloudflare-%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E7%9C%9F%E5%AF%A6ip/",
            "title": "Nginx+Cloudflare-取得使用者真實IP",
            "date_published": "2019-09-22T16:00:00.000Z",
            "content_html": "<h1 id=\"Nginx-Cloudflare-取得使用者真實IP\"><a href=\"#Nginx-Cloudflare-取得使用者真實IP\" class=\"headerlink\" title=\"Nginx+Cloudflare-取得使用者真實IP\"></a>Nginx+Cloudflare-取得使用者真實IP</h1><p>使用 Python 或者其他的程式語言架設網站的時候勢必一定要有個 Webserver 作為代理，但在有些時候網站的一些套件需要取得使用者的 IP 要如何取得?</p>\n<p>一般來說 Nginx 只要在 virtualhost conf 中設定以下就可以了</p>\n<pre><code class=\"bash\">proxy_set_header Host $host; \nproxy_set_header X-Real-IP $remote_addr; \nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n</code></pre>\n<p>在程式部分 (使用 flask) </p>\n<pre><code class=\"python\">from flask import request \nip=request.headers[&#39;X-Forwarded-For&#39;]\n</code></pre>\n<p>這樣就可以取得使用者的 IP 了<br>但如果在 Nginx 前面還加個 Cloudflare CDN 怎麼辦?<br>其實在官方文件中有提到這點 <a href=\"https://support.cloudflare.com/hc/en-us/articles/200170786-Restoring-original-visitor-IPs-Logging-visitor-IP-addresses-with-mod-cloudflare-\">Restoring original visitor IPs</a></p>\n<p>Nginx 上有提到的 Cloudflare IP 區間不一定是固定的，可能隨時會變動<br><a href=\"https://github.com/ergin/\">ergin</a> 就寫出一個可以自動更新的腳本 <a href=\"https://github.com/ergin/nginx-cloudflare-real-ip\">nginx-cloudflare-real-ip</a><br>然後我就 fork 之後把他的 readme 做翻譯<br>大致上跟著操作就可以了 最後別忘了到 Nginx 的 access log 查看 IP 是不是變成使用者的 IP </p>\n",
            "tags": [
                "linux",
                "Python",
                "Linux",
                "cloudflare",
                "Nginx",
                "Real IP address"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/%E4%BD%BF%E7%94%A8-certbot-cloudflare-%E8%AE%93-wildcard-certificate-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%86%91%E8%AD%89/",
            "url": "https://blog.kawai.moe/linux/%E4%BD%BF%E7%94%A8-certbot-cloudflare-%E8%AE%93-wildcard-certificate-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%86%91%E8%AD%89/",
            "title": "使用 certbot+cloudflare 讓 wildcard certificate 自動更新憑證",
            "date_published": "2019-06-18T16:00:00.000Z",
            "content_html": "<p>下方使用 CentOS7 當作示範環境<br>如果你還沒裝 certbot，請先執行 <code>yum install certbot</code></p>\n<ol>\n<li>首先要先登入 Cloudflare，右上角 My Profile 那就可找到 Global API Key<br>請點選 View 輸入密碼就會出現，這把 Key 很重要請小心保管</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/Snipaste_2019-06-19_19-07-35.png\" alt=\"api key\"></p>\n<ol start=\"2\">\n<li>由於這把 Key 很重要，所以要放在一個安全的地方<br>原作者把它放在 <code>/root/.secrets</code> 裡面（你要改地方也行，最後的參數路徑記得改就好）<br>但系統預設沒有 <code>/root/.secrets</code> 這個目錄<br>所以要先建立這個目錄 <code>mkdir /root/.secrets</code><br>然後把下面這兩行填好後放到 <code>/root/.secrets/cloudflare.ini</code> 裡面</li>\n</ol>\n<pre><code>dns_cloudflare_email = &quot;請填你的cloudflare帳號，也就是email&quot;\ndns_cloudflare_api_key = &quot;請輸入上述的 Global API Key&quot;\n</code></pre>\n<ol start=\"3\">\n<li>修改 <code>/root/.secrets/cloudflare.ini</code> 權限</li>\n</ol>\n<pre><code>chmod 0700 /root/.secrets/\nchmod 0400 /root/.secrets/cloudflare.ini\n</code></pre>\n<ol start=\"4\">\n<li>安裝 Certbot 及 CloudFlare DNS 認證套件</li>\n</ol>\n<pre><code>yum install python-pip\npip install certbot-dns-cloudflare\n</code></pre>\n<ol start=\"5\">\n<li>申請 Wildcard SSL 憑證<br>把 <code>example.com</code> 更換成自己的域名，如果有4級域名也要一起加入</li>\n</ol>\n<pre><code>certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/cloudflare.ini -d example.com,*.example.com --preferred-challenges dns-01\n</code></pre>\n<ol start=\"6\">\n<li>於 crontab 設定自動 renew</li>\n</ol>\n<ul>\n<li>nginx</li>\n</ul>\n<pre><code>14 5 * * * /usr/local/bin/certbot renew --quiet --post-hook &quot;/usr/sbin/service nginx reload&quot; &gt; /dev/null 2&gt;&amp;1\n</code></pre>\n<ul>\n<li>apache</li>\n</ul>\n<pre><code>14 5 * * * /usr/local/bin/certbot renew --quiet --post-hook &quot;systemctl reload httpd&quot; &gt; /dev/null 2&gt;&amp;1\n</code></pre>\n",
            "tags": [
                "linux",
                "Linux",
                "certbot",
                "cloudflare",
                "certificate",
                "wildcard certificate"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/debian-ubuntu-%E5%AE%89%E8%A3%9D-webmin/",
            "url": "https://blog.kawai.moe/linux/debian-ubuntu-%E5%AE%89%E8%A3%9D-webmin/",
            "title": "Debian / Ubuntu 安裝 Webmin",
            "date_published": "2019-06-02T16:00:00.000Z",
            "content_html": "<p>首先加入 Webmin 官方 repository, 開啟檔案 &#x2F;etc&#x2F;apt&#x2F;sources.list</p>\n<pre><code class=\"bash\">sudo vi /etc/apt/sources.list\n</code></pre>\n<p>加入以下兩行:</p>\n<pre><code>deb http://download.webmin.com/download/repository sarge contrib\ndeb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib\n</code></pre>\n<p>然後取得以上 repository 的 GPG key:</p>\n<pre><code class=\"bash\">cd /root\nsudo wget http://www.webmin.com/jcameron-key.asc\nsudo apt-key add jcameron-key.asc\n</code></pre>\n<p>加入 Webmin 的 repository 後, 用安就很簡單了, 更新 apt-get 就可以開始安裝了:</p>\n<pre><code class=\"bash\">sudo apt-get update\nsudo apt-get install webmin\n</code></pre>\n<p>Webmin 預設使用 10000 埠號, 設定 firewall 開通 10000 埠號:</p>\n<pre><code class=\"bash\">sudo ufw allow 10000\n</code></pre>\n<p>Webmin 預設使用的埠號是 10000, 可以這樣存取:</p>\n<p><a href=\"http://localhost:10000/\">http://localhost:10000</a><br>或<br><a href=\"https://localhost:10000/\">https://localhost:10000</a></p>\n",
            "tags": [
                "linux",
                "Linux",
                "Webmin"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/openvpn-%E4%BD%BF%E7%94%A8%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%AA%8D%E8%AD%89/",
            "url": "https://blog.kawai.moe/linux/openvpn-%E4%BD%BF%E7%94%A8%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%AA%8D%E8%AD%89/",
            "title": "OpenVPN 使用帳號密碼認證",
            "date_published": "2019-06-02T16:00:00.000Z",
            "content_html": "<p>如果安裝好OpenVPN其實可以使用他預設的製作金鑰來連線，但是要新增帳號或者管理帳號這部分就比較麻煩，所以還是用帳號密碼做管理比較容易</p>\n<p>首先先安裝以下編譯程式需要的日常庫</p>\n<pre><code class=\"bash\">yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel \\\nlibpng libpng-devel freetype freetype-devel libxml2 \\\nlibxml2-devel zlib zlib-devel glibc glibc-devel glib2 \\\nglib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl \\\ncurl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn \\\nlibidn-devel openssl openssl-devel openldap openldap-devel \\\nnss_ldap openldap-clients openldap-servers -y\n</code></pre>\n<p>下面安装pam组件</p>\n<pre><code class=\"bash\">yum install pam_krb5 pam_mysql pam pam-devel -y\n</code></pre>\n<p>我們需要安裝mysql服務器</p>\n<pre><code class=\"bash\">yum install mysql mysql-server mysql-devel mysql-libs -y\n</code></pre>\n<p>登錄mysql建立一個驗證用的測試數據庫，添加使用者帳號</p>\n<pre><code class=\"bash\">mysql -u root -p\n\nmysql&gt; create database vpn;\nmysql&gt; GRANT ALL ON vpn.* TO vpn@localhost IDENTIFIED BY ‘vpn123’;\nmysql&gt; flush privileges;mysql&gt; use vpn;\nmysql&gt; CREATE TABLE vpnuser (\n-&gt; name char(20) NOT NULL,\n-&gt; password char(128) default NULL,\n-&gt; active int(10) NOT NULL DEFAULT 1,\n-&gt; PRIMARY KEY (name)\n-&gt; );\nmysql&gt; insert into vpnuser (name,password) values(‘user1’,password(‘123456’));\n</code></pre>\n<p>在&#x2F;etc&#x2F;pam.d&#x2F;下建立一個配置文件</p>\n<pre><code class=\"bash\">vim /etc/pam.d/openvpn\n</code></pre>\n<p>輸入以下內容並保存</p>\n<pre><code class=\"bash\">auth sufficient pam_mysql.so user=vpn passwd=vpn123 host=localhost db=vpn table=vpnuser usercolumn=name passwdcolumn=password where=active=1 sqllog=0 crypt=2\naccount required pam_mysql.so user=vpn passwd=vpn123 host=localhost db=vpn table=vpnuser usercolumn=name passwdcolumn=password where=active=1 sqllog=0 crypt=2\n\n#crypt(0) — Used to decide to use MySQL’s PASSWORD() function or crypt()\n#0 = No encryption. Passwords in database in plaintext. NOT recommended!\n#1 = Use crypt\n#2 = Use MySQL PASSWORD() function\n</code></pre>\n<p>現在可以測試pam_mysql是否工作正常，但這個動作之前需要安裝sasl</p>\n<pre><code class=\"bash\">yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-lib cyrus-sasl-gssapi -y\n</code></pre>\n<p>測試是否成功</p>\n<pre><code class=\"bash\">saslauthd -a pam\nsaslauthd -a pamtestsaslauthd -u user1 -p 123456 -s openvpn\n</code></pre>\n<p>如果成功，顯示 0: OK 「Success.」，pam_mysql工作正常了</p>\n<p>下面可以開始配置OpenVPN服務器了。</p>\n<p>這裡需要有一部非常重要的步驟，2.1以上的OpenVPN的openvpn-auth-pam.so都會出現驗證錯誤的問題，這裡需要我們重新編譯一個低版本的，我這裡用2.0.7的，大家也可以使用2.0.9版本的。</p>\n<pre><code class=\"bash\">cd /etc/openvpn\nmkdir tmp\ncd tmp\nwget http://kttsite.com/download/openvpn-2.0.7.tar.gz\ntar zxvf openvpn-2.0.7.tar.gz\ncd openvpn-2.0.7\n./configure\ncd plugin/auth-pam/\nmake\ncp openvpn-auth-pam.so /etc/openvpn/\n</code></pre>\n<p>之後在伺服器端的conf檔中加入以下</p>\n<pre><code class=\"bash\">client-cert-not-required\nusername-as-common-name\n#這裡是指定openvpn-auth-pam.so這個插件\nplugin ./openvpn-auth-pam.so openvpn\n</code></pre>\n<p>客戶端的conf檔</p>\n<pre><code class=\"bash\">client\ndev tun\nproto udp\nremote (伺服器IP) (伺服器port)\ncipher (所使用的加密)\nresolv-retry infinite\nnobind\npersist-key\npersist-tun\nca ca.crt\nauth-user-pass\ncomp-lzo\nverb 3\n</code></pre>\n<p>如果要讓客戶端連線時自動輸入帳號密碼可以在客戶端conf中的<code>auth-user-pass</code> 結尾加上 <code>檔案名稱+副檔名</code><br><code>auth-user-pass account.txt</code><br>並在同一個目錄底下新增一個account的txt檔<br>在第一行打上帳號，第二行打上密碼儲存即可</p>\n",
            "tags": [
                "linux",
                "Linux",
                "OpenVPN"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/centos-%E6%9B%B4%E6%96%B0kernel/",
            "url": "https://blog.kawai.moe/linux/centos-%E6%9B%B4%E6%96%B0kernel/",
            "title": "CentOS 更新Kernel",
            "date_published": "2019-06-02T16:00:00.000Z",
            "content_html": "<p>1.導入 Public Key</p>\n<pre><code class=\"bash\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n</code></pre>\n<p>2.安裝 ELRepo</p>\n<p>CentOS 5</p>\n<pre><code class=\"bash\">rpm -Uvh http://www.elrepo.org/elrepo-release-5-5.el5.elrepo.noarch.rpm\n</code></pre>\n<p>CentOS6</p>\n<pre><code class=\"bash\">rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm\n</code></pre>\n<p>CentOS7</p>\n<pre><code class=\"bash\">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n</code></pre>\n<p>3.升級 Kernel</p>\n<p>※在 ELRepo 中有兩個內核選項，一個是 kernel-lt(長期支持版本)，一個是 kernel-ml(主線最新版本)</p>\n<p>kernel-lt</p>\n<pre><code class=\"bash\">yum --enablerepo=elrepo-kernel install kernel-lt -y\n</code></pre>\n<p>kernel-ml</p>\n<pre><code class=\"bash\">yum --enablerepo=elrepo-kernel install kernel-ml -y\n</code></pre>\n<p>4.更改 Grub</p>\n<pre><code>vi /etc/grub.conf\n</code></pre>\n<p>根據安裝好以後的內核位置，修改 default 的值，一般是修改為0，因為 default 從 0 開始，一般新安裝的內核在第一個位置，所以設置<br>default&#x3D;0</p>\n<p>5.查看 Kernel</p>\n<p>重啟主機，重啟後執行<br><code>uname -r</code><br>，查看內核版本號，判斷是否升級成功</p>\n",
            "tags": [
                "linux",
                "Linux",
                "CentOS",
                "Kernel"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/ssh-%E4%BD%BF%E7%94%A8-key-%E7%99%BB%E5%85%A5/",
            "url": "https://blog.kawai.moe/linux/ssh-%E4%BD%BF%E7%94%A8-key-%E7%99%BB%E5%85%A5/",
            "title": "SSH 使用 key 登入",
            "date_published": "2019-06-02T16:00:00.000Z",
            "content_html": "<p>一般ssh會使用帳號跟密碼的方式登入遠端主機，這方式雖然方便但是卻有風險</p>\n<p>只要其他人知道帳號跟密碼一樣就可以登入主機進行任何動作，所以可以使用key來登入，只要沒有這個key就不能登入主機，這樣也比帳號密碼安全。</p>\n<p>而其實它還有另一種用途，如果要用rsync備份或更新其他主機的內容也可以用這個方式，就不用一台一台主機輸入密碼才能傳輸檔案。</p>\n<h1 id=\"1-製作ssh-key\"><a href=\"#1-製作ssh-key\" class=\"headerlink\" title=\"1.製作ssh key\"></a>1.製作ssh key</h1><p><code>ssh-keygen -t rsa </code> 或 <code>ssh-keygen -d (dsa)</code>&#x3D;&gt; 產生出 id_rsa, id_rsa.pub在使用者目錄中.ssh資料夾裡面</p>\n<p>製作時會問 Enter passphrase (empty for no passphrase): 此處直接 enter 跳過,下次才不會詢問密碼</p>\n<p><code>id_rsa</code> 是私鑰 private key</p>\n<p><code>id_rsa.pub</code> 是公鑰 public key</p>\n<h1 id=\"2-讓遠端登入到其他遠端主機\"><a href=\"#2-讓遠端登入到其他遠端主機\" class=\"headerlink\" title=\"2.讓遠端登入到其他遠端主機\"></a>2.讓遠端登入到其他遠端主機</h1><p>假如現在你有 A 跟 B 主機，A 主機照上方的方式做出了ssh金鑰</p>\n<p>主要要讓 <strong>A 主機</strong> 可以不用使用密碼用 key 登入到 <strong>B 主機</strong> 進行操作</p>\n<p>那就要將 <strong>A 主機</strong> 的 “<strong>公鑰</strong>“ 上傳到 <strong>B 主機</strong> 中才能讓 A主機免密碼登入到 B 主機，只要在 A 主機輸入以下指令</p>\n<p>ssh-copy-id -i $HOME&#x2F;.ssh&#x2F;id_rsa.pub (B主機)<br>上方紅字的部分改為主機IP或名稱</p>\n<p>大致上主機回應如下方：</p>\n<pre><code># ssh-copy-id -i $HOME/.ssh/id_rsa.pub (主機名稱)\nThe authenticity of host &#39;(主機名稱) (IP)&#39; can’t be established.\nRSA key fingerprint is 金鑰指紋.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added &#39;(主機名稱),(IP)&#39; (RSA) to the list of known hosts.\nNow try logging into the machine, with &quot;ssh &#39;(主機名稱)&#39;&quot;, and check in:\n\n.ssh/authorized_keys\n\nto make sure we haven’t added extra keys that you weren’t expecting.\n</code></pre>\n<p>※(主機名稱),(IP) 部分會依金鑰及主機名稱IP而改變</p>\n<p>這個時候用 ssh 連線嘗試看看有沒有匯入成功</p>\n<pre><code>ssh root@主機名稱\n</code></pre>\n<p>如果有成功匯入金鑰的話不用打密碼就可以連線進去了</p>\n<h1 id=\"3-本地電腦免密碼登入遠端主機\"><a href=\"#3-本地電腦免密碼登入遠端主機\" class=\"headerlink\" title=\"3.本地電腦免密碼登入遠端主機\"></a>3.本地電腦免密碼登入遠端主機</h1><p>當我們用 windows 要遠端控制主機時大部分都會使用到 PieTTY 或 PuTTY 這兩款 SSH 連線軟體，平常設定都是使用帳號跟密碼做登入，如果要用免密碼登入增加安全性就要使用下方的方式</p>\n<p>(1) 準備好 PieTTY 或 PuTTY (觀眾：廢話(打丁丁</p>\n<p>(2) 將遠端主機使用者的 <strong>公鑰</strong> 重新命名成 <code>authorized_keys</code>  </p>\n<pre><code class=\"bash\">cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys\n</code></pre>\n<p>(3) 將 id_rsa 私鑰 private key 下載到 windows 上</p>\n<p>並下載 PuTTYgen ，開啟 PuTTYgen 上方有個 “Conversions” 選擇 “Import key” 選擇你從主機下載下來的 <strong>id_rsa私鑰</strong>，選擇後點擊下方會有個 “Save private key”，</p>\n<p>軟體會問你說<code>Are you sure you want to save this key without passphrase to protext it?</code>，主要的意思是說”你確定要儲存這個key並不使用任何密碼保護它?”</p>\n<p>選擇 yes 輸出 ppk 檔，ppk 檔是給PuTTY or PieTTY使用的，給 PuTTY or PieTTY ppk 檔路徑就可以免密碼登入囉~</p>\n",
            "tags": [
                "linux",
                "Linux",
                "SSH"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/apache-%E9%80%8F%E9%81%8E-itk-multi-processing-module-%E8%AE%93%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F%E4%BB%A5%E4%B8%8D%E5%90%8C%E4%BD%BF%E7%94%A8%E8%80%85%E5%9F%B7%E8%A1%8C/",
            "url": "https://blog.kawai.moe/linux/apache-%E9%80%8F%E9%81%8E-itk-multi-processing-module-%E8%AE%93%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F%E4%BB%A5%E4%B8%8D%E5%90%8C%E4%BD%BF%E7%94%A8%E8%80%85%E5%9F%B7%E8%A1%8C/",
            "title": "Apache 透過 ITK Multi-Processing Module 讓虛擬主機以不同使用者執行",
            "date_published": "2019-05-30T16:00:00.000Z",
            "content_html": "<p>一般來說 Linux Apache 服務啟動時，預設都是限定一組使用者與群組來執行程序（CentOS 是 apache ，Ubuntu 是 www-data）。</p>\n<p>但有時我們常透過VirtualHost在同一個 Apache 上存放著許多網站。</p>\n<p>這樣子有些網站的權限可能就有問題，可能會導致網頁無法下載或上傳檔案等等，對於主機上的網站也有安全性的問題，所以這裡使用 MPM 來指定 Apache VirtualHost 程序的使用者與群組。</p>\n<p>以下操作皆為CentOS 6.8</p>\n<p>1.安裝mpm-itk 套件</p>\n<pre><code class=\"bash\">yum install httpd-itk -y\n</code></pre>\n<p>2.編輯 &#x2F;etc&#x2F;sysconfig&#x2F;httpd 指定用 httpd.itk 來執行</p>\n<pre><code class=\"bash\">vi /etc/sysconfig/httpd\n</code></pre>\n<p>並加入以下設定(後方為httpd.itk的絕對路徑，可以使用find去完整蒐尋位置)</p>\n<pre><code>HTTPD=/usr/sbin/httpd.itk\n</code></pre>\n<p>3.編輯 &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;php.conf 載入 PHP Module</p>\n<pre><code>vi /etc/httpd/conf.d/php.conf\n</code></pre>\n<p>並加入以下設定</p>\n<pre><code>&lt;IfModule itk.c&gt;\nLoadModule php5_module modules/libphp5.so\n&lt;/IfModule&gt;\n</code></pre>\n<p>4.編輯 Virtual Host 設定檔，透過 AssignUserID 參數設定 Apache 程序的使用者與群組，範例如下：</p>\n<pre><code>&lt;VirtualHost *:80&gt;\nDocumentRoot (網頁根目錄)\nServerName (VirtualHost 名稱)\nErrorLog logs (ErrorLog 存放檔案路徑)\nCustomLog logs (CustomLog 存放檔案路徑)\nAssignUserId (使用者名稱) (群組)\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>最重要的就是 AssignUserId (使用者名稱) (群組)</p>\n<p>名稱及群組中間有一個空格，設定完後重新啟動Apache</p>\n<pre><code class=\"bash\">service httpd restart\n</code></pre>\n<p>如果不知道有沒有正確的套用執行請在網頁根目錄中放一個php網頁，內容為：</p>\n<pre><code class=\"php\">&lt;?php\necho shell_exec(&quot;whoami&quot;);\n?&gt;\n</code></pre>\n<p>這會顯示執行php的使用者名稱，看是不是你設定 AssignUserId 的使用者名稱。</p>\n",
            "tags": [
                "linux",
                "Linux",
                "Apache",
                "VirtualHost",
                "Multi-Processing"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/linux-python3-7-%E5%9F%B7%E8%A1%8C-pip-%E6%99%82-sslerror-%E9%8C%AF%E8%AA%A4/",
            "url": "https://blog.kawai.moe/linux/linux-python3-7-%E5%9F%B7%E8%A1%8C-pip-%E6%99%82-sslerror-%E9%8C%AF%E8%AA%A4/",
            "title": "Linux Python3.7+ 執行 pip 時 SSLError 錯誤",
            "date_published": "2019-05-19T16:00:00.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"/assets/images/linux/cover/hotlink-ok/python37-pip-ssl-error.png\"></p>\n<p>在用 Centos7 安裝 Python3.7+ 一般來說都沒有任何的問題</p>\n<p>只要從原始碼編譯安裝就可以直接使用 Python3.7+ 了</p>\n<p>但是如果要用 pip 安裝(搜尋)套件的時候就會發生錯誤</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/python37-pip-ssl-error.png\" alt=\"pip-sslerror\"></p>\n<p>學長之前有問過我這個問題，想不到自己也碰到了</p>\n<p>雖然學長的做法是把 Python 的版本下降到 3.6 解決這個問題</p>\n<p>但是因為 3.6 跟 3.7 在 async&#x2F;await 的寫法上不一樣</p>\n<p>3.7 的寫法比起 3.6 更精簡，所以才想要在自己的伺服器上配置 Python3.7</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/python-version.png\" alt=\"python多版本\"><br>(很多 Linux 自帶 Python2 而 3 之後的版本都要自行安裝)</p>\n<p>然後如果編譯安裝會跳出以下提示</p>\n<pre><code class=\"bash\">Python build finished successfully!\nThe necessary bits to build these optional modules were not found:\n_ssl _uuid \nTo find the necessary bits, look in setup.py in detect_modules() for the module&#39;s name.\nCould not build the ssl module! \nPython requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host(). \nLibreSSL 2.6.4 and earlier do not provide the \n</code></pre>\n<p>然後查了 Centos7 的 openssl 版本….</p>\n<p>恩…很好 1.0.2k 照理說是符合的</p>\n<p>結果就是文字遊戲，上述的提示是指 openssl 版本要”<strong>超過</strong>“ 1.0.2 或 1.1</p>\n<p>並不是說最低要求 1.0.2 or 1.1</p>\n<p>所以從 openssl 下載最新的版本 openssl-1.1.1</p>\n<pre><code class=\"bash\"># 下載 openssl-1.1.1 原始碼\n# 更多版本請直接到 https://www.openssl.org/source/ 查看\nwget https://www.openssl.org/source/openssl-1.1.1.tar.gz\n\n# 下載編譯時所需要的套件\nyum install -y zlib zlib-devel openssl-devel sqlite-devel bzip2-devel libffi libffi-devel gcc gcc-c++\n\n# 解壓編譯下載的 openssl \ntar zxf openssl-1.1.1.tar.gz \ncd openssl-1.1.1 \n./config shared zlib --prefix=/usr/local/openssl\nmake\nmake install\nmv /usr/bin/openssl /usr/bin/openssl.bak \nmv /usr/include/openssl /usr/include/openssl.bak \nln -s /usr/local/openssl/bin/openssl /usr/bin/openssl \nln -s /usr/local/openssl/include/openssl /usr/include/openssl \necho &quot;/usr/local/openssl/lib&quot; &gt;&gt; /etc/ld.so.conf \nldconfig -v\n# 安裝好 openssl 1.1.1 之後要重新編譯 Python\n./configure --prefix=/user/local/python37 --with-openssl=/usr/local/openssl\n# 在 make 之後有可能發生錯誤 https://bugs.python.org/issue30090\n# 簡單解釋是: \n# make 完成之後發現回傳訊息如下\n#     Failed to build these modules:\n#         _ctypes\n# 此時就要安裝必要套件\n# Centos: yum install -y libffi libffi-devel\n# Ubuntu: apt-get install libffi-dev\n# 安裝完成後再重新 make 一次就不會有錯誤了\nmake \nmake install\n</code></pre>\n<p>編譯安裝好之後應該就可以執行 pip 不會出現 SSLError 錯誤了</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/pip-install-success.png\" alt=\"成功執行pip\"></p>\n",
            "tags": [
                "linux",
                "Python",
                "Linux",
                "SSLError",
                "pip"
            ]
        },
        {
            "id": "https://blog.kawai.moe/linux/webmin-%E5%95%9F%E7%94%A8-two-factor-authentication/",
            "url": "https://blog.kawai.moe/linux/webmin-%E5%95%9F%E7%94%A8-two-factor-authentication/",
            "title": "Webmin 啟用 Two Factor Authentication",
            "date_published": "2019-05-16T16:00:00.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"/assets/images/linux/cover/hotlink-ok/WebminXTwoFactor.png\"></p>\n<p>Webmin Two Factor Authentication Authen::OATH<br>這個問題從我一開始接觸到 Webmin 到現在都沒有解決的問題，所以這邊從其他方式去修復這個問題讓使用者可以用 Two Factor Authentication。  </p>\n<p>安裝 Webmin 後，為了增加你的 Webmin 的安全性<br>可以通過設定 Webmin Two Factor Authentication 輕鬆達成</p>\n<p>但是 Webmin 上安裝會產生許多不同的錯誤<br>其中一個令人惱火的是 Authen :: OATH perl 模塊錯誤  </p>\n<p>當選擇 <code>Google Authentication</code> 並按 <code>下一步</code> 時，您可能會遇到以下錯誤</p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/linux/post/webmin_oath_perl_issue.png\" alt=\"webmin_oath_perl_issue\"></p>\n<p>如果點擊連結 <code>Perl Modules</code> 將從原始碼安裝它，但是再次可能存在其他依賴項錯誤</p>\n<pre><code>Can&#39;t locate ExtUtils/MakeMaker.pm\n</code></pre>\n<p>然後就開始無限迴圈了，不管怎麼案都會卡在這兩個動作<br>原因很簡單，可以是以下任何一個或全部  </p>\n<ol>\n<li>缺少像Moose，Digest或Build包這樣的Perl模塊。</li>\n<li>Authen :: OATH未正確安裝。</li>\n<li>安裝OATH後，您沒有重新啟動Webmin核心。</li>\n</ol>\n<p>最後一個主要問題，因為 Authen::OATH 是從原始碼安裝的<br>除非重新啟動核心，否則 Webmin 將無法檢測到它<br>安裝 Authen::OATH 後嘗試使用 SSH 重啟 Webmin 服務，問題應該得到解決。<br>如果沒有，請按照以下步驟正確安裝  </p>\n<ol>\n<li>安裝Perl包</li>\n</ol>\n<pre><code class=\"shell\">yum install gcc &#39;perl(Moose)&#39; &#39;perl(Digest::HMAC)&#39; &#39;perl(Module::Build)&#39;\n</code></pre>\n<p>這將為 Source 構建安裝所有必需的 perl 包，並支持 WebMin 雙因素身份驗證。</p>\n<p><strong>注意</strong>：如果收到錯誤 <code>No package perl（Moose）available</code>，請通過此下方從 tar 包安裝 perl-Moose<br>下載 Authen :: OATH 原始碼並解壓縮</p>\n<pre><code class=\"shell\"># 下載\nwget http://www.cpan.org/authors/id/S/SI/SIFUKURT/Authen-OATH-v1.0.0.tar.gz\n\n# 解壓縮\ntar -xvf Authen-OATH-v1.0.0.tar.gz\n\n# 切換到該目錄\ncd Authen-OATH-v1.0.0\n\n# 逐個輸入這些命令\nperl Build.PL\n./Build\n./Build test\n./Build install\n\n# 最後重新啟動 webmin\n/etc/webmin/restart\n</code></pre>\n<p>然後再次回到Webmin設定就可以正常使用Two Factor Authentication</p>\n",
            "tags": [
                "linux",
                "Linux",
                "Webmin",
                "2FA",
                "Two Factor Authentication"
            ]
        },
        {
            "id": "https://blog.kawai.moe/python/pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86/",
            "url": "https://blog.kawai.moe/python/pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86/",
            "title": "pyinstaller: lib not found 報錯處理",
            "date_published": "2019-05-15T16:00:00.000Z",
            "content_html": "<p>使用 pyinstaller 打包 py 檔時<br>發生非常多的 WARNING: lib not found: api-ms-win-crt-*.dll  </p>\n<p><img loading=\"lazy\" data-src=\"/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-1.png\" alt=\"2019-05-16-pyinstaller.png\"></p>\n<p>那要如何解決這個問題呢?</p>\n<p>一般開發者在 Windows 使用 Python 是不會用虛擬環境(virtualenv)</p>\n<p>但這邊我是有使用虛擬環境，但操作差不多~</p>\n<p>假如今天我們要打包一個名為 <code>app.py</code> 這個檔案</p>\n<p>我們要先建立 <code>app.py</code> 的 spec 檔</p>\n<pre><code class=\"bash\">pyi-makespec app.py\n</code></pre>\n<p>之後打開 <code>app.spec</code> 如下圖<br><img loading=\"lazy\" data-src=\"/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-2.png\" alt=\"2019-05-16-pyinstaller.png\"></p>\n<p>紅色框起來就是對於我們打包來說比較重要的幾個參數</p>\n<p><code>pathex</code>        : 打包時要用到的檔案之環境路徑<br><code>datas</code>         : 打包完成後程式會使用到的檔案<br><code>hiddenimports</code> : 手動 import 該程式會使用到的 lib 或者自己寫的 modules</p>\n<p>要解決 lib not found 的問題就是要 <code>pathex</code> 這個<br>在加入路徑前我們要先安裝 <a href=\"https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk\">Windows SDK</a><br>因為 Windows 本身沒有內建這些 dll 檔</p>\n<p>安裝完成後到你的安裝目錄 (這邊因人而異，也有可能因版本不同所以有些出入)<br><code>C:\\Program Files (x86)\\Windows Kits\\10\\Redist\\10.0.18362.0\\ucrt\\DLLs</code></p>\n<p>到這個路徑之後會看到有 <code>x64</code> , <code>x86</code> , <code>arm</code> 三個資料夾<br>接著就是依照你的 python 版本去選擇資料夾<br>因為我的 python 是 64bit 所以我就選擇 x64</p>\n<p>在 <code>app.spec</code> 中的 <code>pathex</code> 加入該路徑如下圖<br><img loading=\"lazy\" data-src=\"/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-3.png\" alt=\"2019-05-16-pyinstaller.png\"></p>\n<p>接著要打包的指令不要傻傻的把 py 檔帶進去<br>pyinstaller 預設如果是帶 py 檔進去就會重新生成 spec 檔</p>\n<p>所以我們要打的指令是</p>\n<pre><code class=\"bash\">pyinstaller app.spec\n</code></pre>\n<p>就會讀取 app.spec 的內容將 py 檔打包成 exe 然後這樣就不會噴錯啦~</p>\n",
            "tags": [
                "python",
                "Python",
                "PyInstaller",
                "Linux"
            ]
        }
    ]
}