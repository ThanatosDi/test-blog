<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.kawai.moe</id>
    <title>丁丁的亂寫空間</title>
    <subtitle></subtitle>
    <icon>https://blog.kawai.moe/assets/favicon.ico</icon>
    <link href="https://blog.kawai.moe" />
    <author>
      <name>ThanatosDi(丁丁)</name>
    </author>
    <updated>2024-01-04T15:47:20.000Z</updated>
    <entry>
        <id>https://blog.kawai.moe/synology/synology-nas-%E4%BD%BF%E7%94%A8-cloudflared-tunnel-%E5%BB%BA%E7%AB%8B%E5%B0%8D%E5%A4%96%E9%80%A3%E7%B7%9A/</id>
        <title>Synology NAS 使用 CloudFlared tunnel 建立對外連線</title>
        <link rel="alternate" href="https://blog.kawai.moe/synology/synology-nas-%E4%BD%BF%E7%94%A8-cloudflared-tunnel-%E5%BB%BA%E7%AB%8B%E5%B0%8D%E5%A4%96%E9%80%A3%E7%B7%9A/"/>
        <content type="html"></content>
        <category term="synology" scheme="https://blog.kawai.moe/categories/synology/" />
        <category term="cloudflare" scheme="https://blog.kawai.moe/tags/cloudflare/" />
        <category term="Synology" scheme="https://blog.kawai.moe/tags/Synology/" />
        <category term="NAS" scheme="https://blog.kawai.moe/tags/NAS/" />
        <category term="反向代理" scheme="https://blog.kawai.moe/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/" />
        <category term="tunnel" scheme="https://blog.kawai.moe/tags/tunnel/" />
        <category term="zero trust" scheme="https://blog.kawai.moe/tags/zero-trust/" />
        <updated>2024-01-04T15:47:20.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/windows/hyperx-quadcast-%E8%81%B2%E9%9F%B3%E5%BE%88%E5%B0%8F/</id>
        <title>HyperX QuadCast 聲音很小</title>
        <link rel="alternate" href="https://blog.kawai.moe/windows/hyperx-quadcast-%E8%81%B2%E9%9F%B3%E5%BE%88%E5%B0%8F/"/>
        <content type="html">&lt;h1 id=&#34;HyperX-QuadCast-聲音很小&#34;&gt;&lt;a href=&#34;#HyperX-QuadCast-聲音很小&#34; class=&#34;headerlink&#34; title=&#34;HyperX QuadCast 聲音很小&#34;&gt;&lt;/a&gt;HyperX QuadCast 聲音很小&lt;/h1&gt;&lt;p&gt;因為正在服役的 HyperX cloud 耳麥的麥克風已經半死不活了，趁著 1212 的時候坑了一隻 HyperX QuadCast&lt;/p&gt;
&lt;p&gt;然後因為是桌上型的 mic 所以距離嘴巴其實有一段不小的距離(中間還隔了鍵盤)&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/windows/post/hyperx_quadcast.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;但在平時白天被朋友說講話的聲音很小聲，就整個很困惑，明明已經把增益轉到最大了還小聲?!&lt;br&gt;然後就看到這篇文章&lt;br&gt;但請各位小心服用 畢竟會對硬體造成什麼影響目前我也不知道&lt;br&gt;:::warning&lt;br&gt;如果您的設備直接或間接損壞，我拒絕承擔任何責任，請自行考慮好再使用~&lt;br&gt;:::&lt;br&gt;&lt;a href=&#34;https://www.reddit.com/r/HyperX/comments/97s0ez/hyperx_cloud_2_quiet_mic_solved/&#34;&gt;來源文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡單濃縮來說就是使用軟體 &lt;code&gt;Equalizer APO&lt;/code&gt; 和其擴充套件 &lt;code&gt;Peace&lt;/code&gt; 來提高麥克風音量&lt;/p&gt;
&lt;p&gt;實際的操作如下…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安裝 Equalizer APO&lt;br&gt;一般來說只要下一步下一步安裝完之後會跳出 Configurator 要求選擇哪個裝置，例如我是要讓 HyperX QuadCast 就選擇這個裝置&lt;br&gt;如果沒有跳出來則打開程式目錄並啟動 Configurator.exe，轉到”捕獲設備”並選擇&amp;#x2F;勾選麥克風&lt;/p&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Equalizer APO (sourceforge)&#34;&gt;&lt;a href=&#34;https://sourceforge.net/projects/equalizerapo/&#34; class=&#34;image&#34; data-background-image=&#34;https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;info&#34;&gt;
        &lt;a href=&#34;https://sourceforge.net/projects/equalizerapo/&#34; class=&#34;title&#34;&gt;Equalizer APO (sourceforge)&lt;/a&gt;
        &lt;p class=&#34;desc&#34;&gt;Equalizer APO 下載頁面&lt;/p&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安裝 Peace&lt;/p&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Peace Equalizer, interface Equalizer APO (sourceforge)&#34;&gt;&lt;a href=&#34;https://sourceforge.net/projects/peace-equalizer-apo-extension/&#34; class=&#34;image&#34; data-background-image=&#34;https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;info&#34;&gt;
        &lt;a href=&#34;https://sourceforge.net/projects/peace-equalizer-apo-extension/&#34; class=&#34;title&#34;&gt;Peace Equalizer, interface Equalizer APO (sourceforge)&lt;/a&gt;
        &lt;p class=&#34;desc&#34;&gt;Peace Equalizer, interface Equalizer APO 下載頁面&lt;/p&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Peace 就比較簡單有中文介面，安裝完之後選擇 “簡潔介面”&lt;/p&gt;
&lt;p&gt;首先從右下角的菜單中選擇您的麥克風(預設為”全部音訊設備”)&lt;br&gt;然後就可以在最上面調整想要大聲還是小聲&lt;br&gt;最後再按完成就完成調整麥克風大小聲拉~&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/208232169-88e470a5-186b-4c95-929c-91e2d125c2fa.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="windows" scheme="https://blog.kawai.moe/categories/windows/" />
        <category term="windows" scheme="https://blog.kawai.moe/tags/windows/" />
        <category term="麥克風很小聲" scheme="https://blog.kawai.moe/tags/%E9%BA%A5%E5%85%8B%E9%A2%A8%E5%BE%88%E5%B0%8F%E8%81%B2/" />
        <category term="HyperX" scheme="https://blog.kawai.moe/tags/HyperX/" />
        <category term="QuadCast" scheme="https://blog.kawai.moe/tags/QuadCast/" />
        <category term="HyperX QuadCast" scheme="https://blog.kawai.moe/tags/HyperX-QuadCast/" />
        <updated>2022-12-17T07:37:07.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/games/minecraft/minecraft-%E5%AE%89%E8%A3%9D-fabric/</id>
        <title>Minecraft 安裝 fabric</title>
        <link rel="alternate" href="https://blog.kawai.moe/games/minecraft/minecraft-%E5%AE%89%E8%A3%9D-fabric/"/>
        <content type="html">&lt;h1 id=&#34;前言-廢話w&#34;&gt;&lt;a href=&#34;#前言-廢話w&#34; class=&#34;headerlink&#34; title=&#34;前言(廢話w)&#34;&gt;&lt;/a&gt;前言(廢話w)&lt;/h1&gt;&lt;p&gt;玩 minecraft 到最後一定會想玩玩廣大開發者開發的各種 mods&lt;br&gt;而現在整個 minecraft vanilla 版本的 mod loader 就兩個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fabric&lt;/li&gt;
&lt;li&gt;forge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而這邊介紹 fabric 的安裝流程&lt;/p&gt;
&lt;h1 id=&#34;準備好-minecraft-客戶端&#34;&gt;&lt;a href=&#34;#準備好-minecraft-客戶端&#34; class=&#34;headerlink&#34; title=&#34;準備好 minecraft 客戶端&#34;&gt;&lt;/a&gt;準備好 minecraft 客戶端&lt;/h1&gt;&lt;p&gt;當你下載好了客戶端並且看到下方的畫面的時候就先放著不理它，這邊就已經可以準備安裝 fabric&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190607741-a1ffe80f-64b7-48bf-a8d9-7e1457cf48b3.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
&lt;h1 id=&#34;下載-fabric&#34;&gt;&lt;a href=&#34;#下載-fabric&#34; class=&#34;headerlink&#34; title=&#34;下載 fabric&#34;&gt;&lt;/a&gt;下載 fabric&lt;/h1&gt;&lt;p&gt;:::info&lt;br&gt;前往 &lt;a href=&#34;https://fabricmc.net/use/installer/&#34;&gt;fabric&lt;/a&gt; 下載 fabric&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;開啟頁面後可以選擇下載 jar 檔或 exe 檔，兩個都可以使用&lt;br&gt;下載後會看到這個 UI&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190611089-abb290be-78ed-4eae-b27a-681087498121.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
&lt;p&gt;[:star2:注意1]{.label .danger} 確定上方頁籤是: “客戶端”&lt;br&gt;[:star2:注意2]{.label .danger} 確定 “Minecraft版本” 是你即將遊玩的版本號&lt;br&gt;[:star2:注意3]{.label .danger} 確定 “安裝位置” 這個位置如果沒有&lt;strong&gt;刻意&lt;/strong&gt;去做調整就預設即可&lt;br&gt;[:star2:注意4]{.label .danger} 確定 “建立設定檔” 這個選項有打勾&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190611323-9b791f77-86ea-4a0d-aa8c-80dd51f15b89.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
&lt;p&gt;接著把 minecraft 客戶端關閉，並且在 &lt;em&gt;&lt;strong&gt;fabric 安裝程式&lt;/strong&gt;&lt;/em&gt;中直接按下安裝就會開始安裝 fabric&lt;/p&gt;
&lt;p&gt;等待安裝完後再開啟 minecraft 客戶端，就會看到新的設定檔&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190612152-41def0bb-276e-4dac-ad08-4d3bfd53f482.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
&lt;h1 id=&#34;安裝-mods&#34;&gt;&lt;a href=&#34;#安裝-mods&#34; class=&#34;headerlink&#34; title=&#34;安裝 mods&#34;&gt;&lt;/a&gt;安裝 mods&lt;/h1&gt;&lt;p&gt;安裝 mods 很簡單，只要在 minecraft 客戶端上方的頁籤切換成 &lt;strong&gt;“安裝檔”&lt;/strong&gt;&lt;br&gt;並懸停在 fabric 的設定檔上，後方就會有三個按鈕可以按，點擊第二個會開啟資料夾&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190612475-075b2c2e-b548-4fa7-bbe0-94cf6472d77b.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
&lt;p&gt;此時只要將你下載的 fabric mods 放入 mods 資料夾內，重開遊戲就會自動載入 mods 了&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/190613055-b20118fc-db4e-4690-908f-0a632cee36d4.png&#34; alt=&#34;image&#34;&gt;{width&amp;#x3D;”600px”}&lt;/p&gt;
</content>
        <category term="games" scheme="https://blog.kawai.moe/categories/games/" />
        <category term="minecraft" scheme="https://blog.kawai.moe/categories/games/minecraft/" />
        <category term="games" scheme="https://blog.kawai.moe/tags/games/" />
        <category term="minecraft" scheme="https://blog.kawai.moe/tags/minecraft/" />
        <updated>2022-09-15T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/synology/dsm-photo%E3%80%81drive-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
        <title>DSM photo、drive 反向代理</title>
        <link rel="alternate" href="https://blog.kawai.moe/synology/dsm-photo%E3%80%81drive-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;DSM-photo、drive-反向代理&#34;&gt;&lt;a href=&#34;#DSM-photo、drive-反向代理&#34; class=&#34;headerlink&#34; title=&#34;DSM photo、drive 反向代理&#34;&gt;&lt;/a&gt;DSM photo、drive 反向代理&lt;/h1&gt;&lt;p&gt;預設 Synology 的 NAS photo 和 drive 兩個應用程式的 port 是與 DSM 相同&lt;br&gt;[http 5000]{.label .info}&lt;br&gt;[https 5001]{.label .info}&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186729195-d5316b2c-c527-4d59-85d1-aec53e80fc21.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186729301-f985e8ed-bb6d-4a88-8980-1c88c094db85.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186729388-436a4809-a905-4302-bd24-2fa64561f4f2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;詳細的套件對應 port 可以參考 &lt;a href=&#34;https://kb.synology.com/zh-tw/DSM/tutorial/What_network_ports_are_used_by_Synology_services&#34;&gt;Synology 官方的文件&lt;/a&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;所以今天如果我們要在外面使用&lt;strong&gt;自有網域&lt;/strong&gt;透過網際網路存取 photo 和 drive 有兩種方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用群輝自帶的 QuickConnect&lt;/li&gt;
&lt;li&gt;利用反向代理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一個就不在此敘述如何設定，故這裡要使用的是第二個，利用反向代理&lt;/p&gt;
&lt;h2 id=&#34;設定-photo-和-drive-的-port&#34;&gt;&lt;a href=&#34;#設定-photo-和-drive-的-port&#34; class=&#34;headerlink&#34; title=&#34;設定 photo 和 drive 的 port&#34;&gt;&lt;/a&gt;設定 photo 和 drive 的 port&lt;/h2&gt;&lt;p&gt;首先我們要先修改 photo 和 drive 的應用程式所使用的 port&lt;br&gt;進到 &lt;code&gt;DSM -&amp;gt; 控制台 -&amp;gt; 登入入口 -&amp;gt; 應用程式 -&amp;gt; Synology Drive&lt;/code&gt;&lt;br&gt;在自訂連接埠設定 https 的 port 值，&lt;br&gt;:::warning&lt;br&gt;這邊設定的 http 或 https 和 port 會影響到後續的反向代理設定&lt;br&gt;這邊舉例使用 https 並且連接埠 (port) 為 20000&lt;br&gt;:::&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186730230-e3fd170c-a3b0-4f76-b340-e07ac31ee40c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;設定反向代理&#34;&gt;&lt;a href=&#34;#設定反向代理&#34; class=&#34;headerlink&#34; title=&#34;設定反向代理&#34;&gt;&lt;/a&gt;設定反向代理&lt;/h2&gt;&lt;p&gt;接著到 &lt;code&gt;控制台 -&amp;gt; 登入入口 -&amp;gt; 進階 -&amp;gt; 反向代理&lt;/code&gt; 新增反向代理&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186730915-278f431b-a7ad-4f1c-a234-17f0acb0c72d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186731409-e2085639-8d89-4c1f-aabb-697e8d666ae6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;反向代理-來源&#34;&gt;&lt;a href=&#34;#反向代理-來源&#34; class=&#34;headerlink&#34; title=&#34;反向代理 - 來源&#34;&gt;&lt;/a&gt;反向代理 - 來源&lt;/h3&gt;&lt;p&gt;[:star2:反向代理名稱]{.label .danger} 輸入一個你自己懂得這是什麼服務的名字&lt;br&gt;[:star2:通訊協定]{.label .danger} 在 &lt;a href=&#34;#%E8%A8%AD%E5%AE%9A-photo-%E5%92%8C-drive-%E7%9A%84-port&#34;&gt;設定 photo 和 drive 的 port&lt;/a&gt; 的地方所設定的連接埠 (port) 所對應的協定，這邊舉例使用 https 並且連接埠 (port) 為 20000&lt;br&gt;[:star2:主機名稱]{.label .danger} 因為是 NAS 本機服務，所以這邊都是使用 &lt;code&gt;localhost&lt;/code&gt;&lt;br&gt;[:star2:連接埠]{.label .danger} 在 &lt;a href=&#34;#%E8%A8%AD%E5%AE%9A-photo-%E5%92%8C-drive-%E7%9A%84-port&#34;&gt;設定 photo 和 drive 的 port&lt;/a&gt; 的地方所設定的連接埠 (port)，這邊舉例為 20000&lt;/p&gt;
&lt;h3 id=&#34;反向代理-目的地&#34;&gt;&lt;a href=&#34;#反向代理-目的地&#34; class=&#34;headerlink&#34; title=&#34;反向代理 - 目的地&#34;&gt;&lt;/a&gt;反向代理 - 目的地&lt;/h3&gt;&lt;p&gt;[:star2:通訊協定]{.label .danger} 這邊建議都選擇 &lt;code&gt;https&lt;/code&gt; 可以到 &lt;code&gt;控制台 -&amp;gt; 安全性 -&amp;gt; 憑證&lt;/code&gt; 申請一個 TLS 證書&lt;br&gt;[:star2:主機名稱]{.label .danger} 你的網域，例如我要用 &lt;code&gt;photo.example.com&lt;/code&gt; 開啟 photo 服務 就在此輸入 &lt;code&gt;photo.example.com&lt;/code&gt;&lt;br&gt;[:star2:連接埠]{.label .danger} 如果第一個&lt;strong&gt;通訊協定&lt;/strong&gt;選擇為 https 這邊就要是 443；http 為 80&lt;br&gt;整體設定後就如下圖&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://user-images.githubusercontent.com/12424898/186734520-b1c15620-0080-4329-a819-0163a212ee2d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;設定完成後就可以透過自己的網域訪問服務啦🎉&lt;/p&gt;
</content>
        <category term="synology" scheme="https://blog.kawai.moe/categories/synology/" />
        <category term="Synology" scheme="https://blog.kawai.moe/tags/Synology/" />
        <category term="NAS" scheme="https://blog.kawai.moe/tags/NAS/" />
        <category term="DSM" scheme="https://blog.kawai.moe/tags/DSM/" />
        <category term="Synology photo" scheme="https://blog.kawai.moe/tags/Synology-photo/" />
        <category term="Synology drive" scheme="https://blog.kawai.moe/tags/Synology-drive/" />
        <category term="反向代理" scheme="https://blog.kawai.moe/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/" />
        <updated>2022-08-25T15:47:20.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/let-s-encrypt-%E8%AD%89%E6%9B%B8%E7%B0%BD%E7%BD%B2%E5%A4%B1%E6%95%97-bad-handshake/</id>
        <title>let&#39;s encrypt 證書簽署失敗 bad handshake</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/let-s-encrypt-%E8%AD%89%E6%9B%B8%E7%B0%BD%E7%BD%B2%E5%A4%B1%E6%95%97-bad-handshake/"/>
        <content type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/cover/hotlink-ok/LetsEncrypt-SocialShare.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;let’s-encrypt-證書簽署失敗-bad-handshake&#34;&gt;&lt;a href=&#34;#let’s-encrypt-證書簽署失敗-bad-handshake&#34; class=&#34;headerlink&#34; title=&#34;let’s encrypt 證書簽署失敗 bad handshake&#34;&gt;&lt;/a&gt;let’s encrypt 證書簽署失敗 bad handshake&lt;/h1&gt;&lt;p&gt;當平時自動運作的 Let’s encrypt都正常運作時，最近要簽署新證書卻發現下 &lt;code&gt;certbot renew&lt;/code&gt; 無法正常簽署並出現錯誤 &lt;strong&gt;unexpected error: bad handshake&lt;/strong&gt; 要怎麼處理這問題呢&lt;/p&gt;
&lt;p&gt;其實這問題在先前官方有公告要調整 root 證書&lt;a href=&#34;https://letsencrypt.org/zh-tw/docs/dst-root-ca-x3-expiration-september-2021/&#34;&gt;公告&lt;/a&gt;，原先使用的 DST Root CA X3 將於 2021 年 9 月 30 日到期，而新的 ISRG Root X1 在舊裝置上並不存在，所以導致切換成 ISRG Root X1 而舊裝置找不到該憑證就導致 TLS handshake 失敗  &lt;/p&gt;
&lt;p&gt;最簡單就是更新套件，而有些主機可能因為歷史包袱不好做套件更新等等處理，所以就手動新增 ISRG Root X1 證書來驗證&lt;/p&gt;
&lt;p&gt;首先先測試看看能不能訪問新的驗證端API&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;curl -v https://acme-v02.api.letsencrypt.org/directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;回傳的結果應該會有個 &lt;code&gt;SSL certificate problem: unable to get local issuer certificate&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;接著到官網這邊取得 &lt;a href=&#34;https://letsencrypt.org/zh-tw/certificates/&#34;&gt;ISRG Root X1 證書&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/Snipaste_2021-12-16_17-45-15.jpg&#34; alt=&#34;ISRG Root X1 證書&#34;&gt;&lt;/p&gt;
&lt;p&gt;將裡面的文字複製起來，並且到主機中的 &lt;code&gt;/usr/local/share/ca-certificates&lt;/code&gt; 建立一個檔案 &lt;code&gt;isrgrootx1.pem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接著將內容貼上該檔案中，然後執行 &lt;code&gt;sudo update-ca-certificates&lt;/code&gt; 正常會顯示 &lt;code&gt;1 add&lt;/code&gt;，此時在進行 &lt;code&gt;certbot renew&lt;/code&gt; 就可以正常執行了&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="let&#39;s encrypt" scheme="https://blog.kawai.moe/tags/let-s-encrypt/" />
        <category term="bad handshake" scheme="https://blog.kawai.moe/tags/bad-handshake/" />
        <updated>2021-12-15T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/centos-%E5%AE%89%E8%A3%9D-webmin/</id>
        <title>CentOS 安裝 Webmin</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/centos-%E5%AE%89%E8%A3%9D-webmin/"/>
        <content type="html">&lt;p&gt;利用 yum 安裝 Webmin&lt;/p&gt;
&lt;p&gt;首先先下載 repo 到 &amp;#x2F;etc&amp;#x2F;yum.repos.d&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /etc/yum.repos.d
rpm --import https://raw.githubusercontent.com/ThanatosDi/Install-Webmin/master/key.asc

wget https://raw.githubusercontent.com/ThanatosDi/Install-Webmin/master/webmin.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接著 yum install 安裝即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum install webmin -y
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="Webmin" scheme="https://blog.kawai.moe/tags/Webmin/" />
        <category term="CentOS" scheme="https://blog.kawai.moe/tags/CentOS/" />
        <updated>2020-05-15T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/centos7-%E5%AE%89%E8%A3%9D%E5%A4%9A%E7%89%88%E6%9C%AC-python/</id>
        <title>Centos7 安裝多版本 Python</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/centos7-%E5%AE%89%E8%A3%9D%E5%A4%9A%E7%89%88%E6%9C%AC-python/"/>
        <content type="html">&lt;p&gt;雖然現在 Python 最新版本已經到了 3.7 但是 Linux 上還是有蠻多的套件使用 Python2，加上 Python2.7 的支援期間只到 2020(不知是否會再延長)，但越來越多的開發者已經轉移版本到 3.x 了&lt;br&gt;那要如何保留原始版本的 Python 另外再安裝 Python3.x 呢?&lt;br&gt;首先要有 ROOT 權限或者 sudo (廢話w&lt;br&gt;然後到 &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 官網&lt;/a&gt;找你要下載的版本連結&lt;br&gt;ps: 這邊範例為下載最新版本 3.7.4&lt;br&gt;如果要安裝多個 3.x 建議還是寫完整版號&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd /tmp
# 下載編譯包
wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz
# 解壓縮編譯包
tar xf Python-3.7.4.tar.xz -C /usr/local/src/
# 開始編譯並設定預設安裝路徑(/usr/local/python3) 可以自己設定
./configure --prefix=/usr/local/python3
# 安裝
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大致上到這邊就是完成安裝，但是不管用 python3 python3.7 python37 都是回應 command not found&lt;br&gt;很簡單因為剛剛安裝完沒有在預設的 command 資料夾中&lt;br&gt;所以我們要建立軟連結&lt;br&gt;PS: 這邊也是做個範例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ln -s /usr/local/python3/bin/python3 /usr/bin/python3
ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣子你再執行 &lt;code&gt;python3 -V&lt;/code&gt; 照理就會出現 Python3.x.x 的訊息，同時執行 &lt;code&gt;python -V&lt;/code&gt; 會得到 Python2.7.5&lt;br&gt;這樣就安裝好其他版本的 Python 也保留預設的 Python2.7&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Python" scheme="https://blog.kawai.moe/tags/Python/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="Centos7" scheme="https://blog.kawai.moe/tags/Centos7/" />
        <updated>2019-09-28T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/phpmyadmin-%E5%95%9F%E7%94%A82fa/</id>
        <title>phpMyAdmin 啟用2FA</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/phpmyadmin-%E5%95%9F%E7%94%A82fa/"/>
        <content type="html">&lt;h1 id=&#34;phpMyAdmin-啟用2FA&#34;&gt;&lt;a href=&#34;#phpMyAdmin-啟用2FA&#34; class=&#34;headerlink&#34; title=&#34;phpMyAdmin 啟用2FA&#34;&gt;&lt;/a&gt;phpMyAdmin 啟用2FA&lt;/h1&gt;&lt;p&gt;最近把伺服器的 phpMyAdmin 升級到 4.9.1&lt;br&gt;然後就在設定裡面發現可以開啟 2FA 的選項  &lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/phpmyadmin-enable-2fa.png&#34; alt=&#34;phpMyAdmin 中啟用 2FA&#34;&gt;&lt;/p&gt;
&lt;p&gt;後來去看看 documentation 之後發現其實在 4.8.0(2018&amp;#x2F;4&amp;#x2F;19) 就加入這個功能了，沒錯啦我就是沒在更新，因為之前有過更新完系統直接掛掉的陰影存在，但其實為了安全性還是要好好的更新套件跟軟體XD&lt;/p&gt;
&lt;p&gt;如果直接從 phpMyAdmin 官網下載下來的 zip 檔其實可以直接啟動 2FA 功能，那如果是直接 git 下來的就還要另外安裝一些套件，這邊不加以闡述&lt;/p&gt;
&lt;p&gt;啟用 2FA 非常簡單，只要選擇第二項 “認證應用程式 (2FA)”&lt;br&gt;然後按下 “設定雙因素認證”&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/phpmyadmin-enable-2fa-2.png&#34; alt=&#34;phpMyAdmin 中啟用 2FA&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下來就會看到一個 QRcode 跟密碼&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/phpmyadmin-enable-2fa-3.png&#34; alt=&#34;phpMyAdmin 中啟用 2FA&#34;&gt;&lt;/p&gt;
&lt;p&gt;這邊就要用到你的手機了，使用 Google Two Factor Authentication 或者 Authy 兩個應用程式都可以，掃描 QRCode 之後並輸入該 2FA 的驗證就可以開啟了～  &lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/phpmyadmin-enable-2fa-finish.png&#34; alt=&#34;phpMyAdmin 中啟用 2FA&#34;&gt;&lt;/p&gt;
&lt;p&gt;那接下來就是緊急處理，如果是用 Google Two Factor Authentication 的使用者要注意，在做手機更換的時候 &lt;strong&gt;一定!一定!一定!一定!&lt;/strong&gt; 一定要先把 2FA 先解除在做更換手機的動作，不然會導致無法登入 phpMyAdmin &lt;/p&gt;
&lt;p&gt;那如果真的很不幸你真的忘記了，是有解決辦法&lt;br&gt;先用 ssh 登入你的 mysql&lt;br&gt;PS: 這邊是範例，忘記 root 的 2FA，請依照你自己的伺服器做處理  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mysql -u root -p # 使用 root 登入 mysql

SELECT * FROM `phpmyadmin`.`pma__userconfig` WHERE `username` = &amp;#39;root&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之後會看到一些資料&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;| root     | 2019-09-25 16:21:20 | &amp;#123;&amp;quot;Server\/hide_db&amp;quot;:&amp;quot;information_schema|mysql|performance_schema|information_schema&amp;quot;,&amp;quot;lang&amp;quot;:&amp;quot;zh_TW&amp;quot;,&amp;quot;collation_connection&amp;quot;:&amp;quot;utf8mb4_unicode_ci&amp;quot;,&amp;quot;Console\/Mode&amp;quot;:&amp;quot;collapse&amp;quot;,&amp;quot;DefaultConnectionCollation&amp;quot;:&amp;quot;utf8_unicode_ci&amp;quot;,&amp;quot;2fa&amp;quot;:&amp;#123;&amp;quot;backend&amp;quot;:&amp;quot;application&amp;quot;,&amp;quot;settings&amp;quot;:&amp;#123;&amp;quot;secret&amp;quot;:&amp;quot;KKASIRHQ904U2KS918JSEBTJ9132459U1902&amp;quot;&amp;#125;&amp;#125;,&amp;quot;ThemeDefault&amp;quot;:&amp;quot;pmahomme&amp;quot;&amp;#125; |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最重要最重要的就是在後面的 JSON 資料中的 “2fa”&lt;br&gt;裡面有個 “secret” 把這段輸入到 Google Two Factor Authentication 中就可以繼續使用了&lt;br&gt;PS: 這邊的範例是假的，當然沒有這麼的長&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="2FA" scheme="https://blog.kawai.moe/tags/2FA/" />
        <category term="phpMyAdmin" scheme="https://blog.kawai.moe/tags/phpMyAdmin/" />
        <updated>2019-09-24T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/nginx-cloudflare-%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E7%9C%9F%E5%AF%A6ip/</id>
        <title>Nginx+Cloudflare-取得使用者真實IP</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/nginx-cloudflare-%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E7%9C%9F%E5%AF%A6ip/"/>
        <content type="html">&lt;h1 id=&#34;Nginx-Cloudflare-取得使用者真實IP&#34;&gt;&lt;a href=&#34;#Nginx-Cloudflare-取得使用者真實IP&#34; class=&#34;headerlink&#34; title=&#34;Nginx+Cloudflare-取得使用者真實IP&#34;&gt;&lt;/a&gt;Nginx+Cloudflare-取得使用者真實IP&lt;/h1&gt;&lt;p&gt;使用 Python 或者其他的程式語言架設網站的時候勢必一定要有個 Webserver 作為代理，但在有些時候網站的一些套件需要取得使用者的 IP 要如何取得?&lt;/p&gt;
&lt;p&gt;一般來說 Nginx 只要在 virtualhost conf 中設定以下就可以了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;proxy_set_header Host $host; 
proxy_set_header X-Real-IP $remote_addr; 
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在程式部分 (使用 flask) &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;from flask import request 
ip=request.headers[&amp;#39;X-Forwarded-For&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣就可以取得使用者的 IP 了&lt;br&gt;但如果在 Nginx 前面還加個 Cloudflare CDN 怎麼辦?&lt;br&gt;其實在官方文件中有提到這點 &lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200170786-Restoring-original-visitor-IPs-Logging-visitor-IP-addresses-with-mod-cloudflare-&#34;&gt;Restoring original visitor IPs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx 上有提到的 Cloudflare IP 區間不一定是固定的，可能隨時會變動&lt;br&gt;&lt;a href=&#34;https://github.com/ergin/&#34;&gt;ergin&lt;/a&gt; 就寫出一個可以自動更新的腳本 &lt;a href=&#34;https://github.com/ergin/nginx-cloudflare-real-ip&#34;&gt;nginx-cloudflare-real-ip&lt;/a&gt;&lt;br&gt;然後我就 fork 之後把他的 readme 做翻譯&lt;br&gt;大致上跟著操作就可以了 最後別忘了到 Nginx 的 access log 查看 IP 是不是變成使用者的 IP &lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Python" scheme="https://blog.kawai.moe/tags/Python/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="cloudflare" scheme="https://blog.kawai.moe/tags/cloudflare/" />
        <category term="Nginx" scheme="https://blog.kawai.moe/tags/Nginx/" />
        <category term="Real IP address" scheme="https://blog.kawai.moe/tags/Real-IP-address/" />
        <updated>2019-09-22T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/%E4%BD%BF%E7%94%A8-certbot-cloudflare-%E8%AE%93-wildcard-certificate-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%86%91%E8%AD%89/</id>
        <title>使用 certbot+cloudflare 讓 wildcard certificate 自動更新憑證</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/%E4%BD%BF%E7%94%A8-certbot-cloudflare-%E8%AE%93-wildcard-certificate-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%86%91%E8%AD%89/"/>
        <content type="html">&lt;p&gt;下方使用 CentOS7 當作示範環境&lt;br&gt;如果你還沒裝 certbot，請先執行 &lt;code&gt;yum install certbot&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先要先登入 Cloudflare，右上角 My Profile 那就可找到 Global API Key&lt;br&gt;請點選 View 輸入密碼就會出現，這把 Key 很重要請小心保管&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/Snipaste_2019-06-19_19-07-35.png&#34; alt=&#34;api key&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;由於這把 Key 很重要，所以要放在一個安全的地方&lt;br&gt;原作者把它放在 &lt;code&gt;/root/.secrets&lt;/code&gt; 裡面（你要改地方也行，最後的參數路徑記得改就好）&lt;br&gt;但系統預設沒有 &lt;code&gt;/root/.secrets&lt;/code&gt; 這個目錄&lt;br&gt;所以要先建立這個目錄 &lt;code&gt;mkdir /root/.secrets&lt;/code&gt;&lt;br&gt;然後把下面這兩行填好後放到 &lt;code&gt;/root/.secrets/cloudflare.ini&lt;/code&gt; 裡面&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;dns_cloudflare_email = &amp;quot;請填你的cloudflare帳號，也就是email&amp;quot;
dns_cloudflare_api_key = &amp;quot;請輸入上述的 Global API Key&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;修改 &lt;code&gt;/root/.secrets/cloudflare.ini&lt;/code&gt; 權限&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;chmod 0700 /root/.secrets/
chmod 0400 /root/.secrets/cloudflare.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;安裝 Certbot 及 CloudFlare DNS 認證套件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;yum install python-pip
pip install certbot-dns-cloudflare
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;申請 Wildcard SSL 憑證&lt;br&gt;把 &lt;code&gt;example.com&lt;/code&gt; 更換成自己的域名，如果有4級域名也要一起加入&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/cloudflare.ini -d example.com,*.example.com --preferred-challenges dns-01
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;於 crontab 設定自動 renew&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;14 5 * * * /usr/local/bin/certbot renew --quiet --post-hook &amp;quot;/usr/sbin/service nginx reload&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;apache&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;14 5 * * * /usr/local/bin/certbot renew --quiet --post-hook &amp;quot;systemctl reload httpd&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="certbot" scheme="https://blog.kawai.moe/tags/certbot/" />
        <category term="cloudflare" scheme="https://blog.kawai.moe/tags/cloudflare/" />
        <category term="certificate" scheme="https://blog.kawai.moe/tags/certificate/" />
        <category term="wildcard certificate" scheme="https://blog.kawai.moe/tags/wildcard-certificate/" />
        <updated>2019-06-18T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/debian-ubuntu-%E5%AE%89%E8%A3%9D-webmin/</id>
        <title>Debian / Ubuntu 安裝 Webmin</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/debian-ubuntu-%E5%AE%89%E8%A3%9D-webmin/"/>
        <content type="html">&lt;p&gt;首先加入 Webmin 官方 repository, 開啟檔案 &amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;sudo vi /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加入以下兩行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://download.webmin.com/download/repository sarge contrib
deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後取得以上 repository 的 GPG key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd /root
sudo wget http://www.webmin.com/jcameron-key.asc
sudo apt-key add jcameron-key.asc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加入 Webmin 的 repository 後, 用安就很簡單了, 更新 apt-get 就可以開始安裝了:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;sudo apt-get update
sudo apt-get install webmin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Webmin 預設使用 10000 埠號, 設定 firewall 開通 10000 埠號:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;sudo ufw allow 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Webmin 預設使用的埠號是 10000, 可以這樣存取:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:10000/&#34;&gt;http://localhost:10000&lt;/a&gt;&lt;br&gt;或&lt;br&gt;&lt;a href=&#34;https://localhost:10000/&#34;&gt;https://localhost:10000&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="Webmin" scheme="https://blog.kawai.moe/tags/Webmin/" />
        <updated>2019-06-02T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/openvpn-%E4%BD%BF%E7%94%A8%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%AA%8D%E8%AD%89/</id>
        <title>OpenVPN 使用帳號密碼認證</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/openvpn-%E4%BD%BF%E7%94%A8%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%AA%8D%E8%AD%89/"/>
        <content type="html">&lt;p&gt;如果安裝好OpenVPN其實可以使用他預設的製作金鑰來連線，但是要新增帳號或者管理帳號這部分就比較麻煩，所以還是用帳號密碼做管理比較容易&lt;/p&gt;
&lt;p&gt;首先先安裝以下編譯程式需要的日常庫&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel \
libpng libpng-devel freetype freetype-devel libxml2 \
libxml2-devel zlib zlib-devel glibc glibc-devel glib2 \
glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl \
curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn \
libidn-devel openssl openssl-devel openldap openldap-devel \
nss_ldap openldap-clients openldap-servers -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面安装pam组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum install pam_krb5 pam_mysql pam pam-devel -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們需要安裝mysql服務器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum install mysql mysql-server mysql-devel mysql-libs -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登錄mysql建立一個驗證用的測試數據庫，添加使用者帳號&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mysql -u root -p

mysql&amp;gt; create database vpn;
mysql&amp;gt; GRANT ALL ON vpn.* TO vpn@localhost IDENTIFIED BY ‘vpn123’;
mysql&amp;gt; flush privileges;mysql&amp;gt; use vpn;
mysql&amp;gt; CREATE TABLE vpnuser (
-&amp;gt; name char(20) NOT NULL,
-&amp;gt; password char(128) default NULL,
-&amp;gt; active int(10) NOT NULL DEFAULT 1,
-&amp;gt; PRIMARY KEY (name)
-&amp;gt; );
mysql&amp;gt; insert into vpnuser (name,password) values(‘user1’,password(‘123456’));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&amp;#x2F;etc&amp;#x2F;pam.d&amp;#x2F;下建立一個配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;vim /etc/pam.d/openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;輸入以下內容並保存&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;auth sufficient pam_mysql.so user=vpn passwd=vpn123 host=localhost db=vpn table=vpnuser usercolumn=name passwdcolumn=password where=active=1 sqllog=0 crypt=2
account required pam_mysql.so user=vpn passwd=vpn123 host=localhost db=vpn table=vpnuser usercolumn=name passwdcolumn=password where=active=1 sqllog=0 crypt=2

#crypt(0) — Used to decide to use MySQL’s PASSWORD() function or crypt()
#0 = No encryption. Passwords in database in plaintext. NOT recommended!
#1 = Use crypt
#2 = Use MySQL PASSWORD() function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在可以測試pam_mysql是否工作正常，但這個動作之前需要安裝sasl&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-lib cyrus-sasl-gssapi -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;測試是否成功&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;saslauthd -a pam
saslauthd -a pamtestsaslauthd -u user1 -p 123456 -s openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果成功，顯示 0: OK 「Success.」，pam_mysql工作正常了&lt;/p&gt;
&lt;p&gt;下面可以開始配置OpenVPN服務器了。&lt;/p&gt;
&lt;p&gt;這裡需要有一部非常重要的步驟，2.1以上的OpenVPN的openvpn-auth-pam.so都會出現驗證錯誤的問題，這裡需要我們重新編譯一個低版本的，我這裡用2.0.7的，大家也可以使用2.0.9版本的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd /etc/openvpn
mkdir tmp
cd tmp
wget http://kttsite.com/download/openvpn-2.0.7.tar.gz
tar zxvf openvpn-2.0.7.tar.gz
cd openvpn-2.0.7
./configure
cd plugin/auth-pam/
make
cp openvpn-auth-pam.so /etc/openvpn/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之後在伺服器端的conf檔中加入以下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;client-cert-not-required
username-as-common-name
#這裡是指定openvpn-auth-pam.so這個插件
plugin ./openvpn-auth-pam.so openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客戶端的conf檔&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;client
dev tun
proto udp
remote (伺服器IP) (伺服器port)
cipher (所使用的加密)
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
auth-user-pass
comp-lzo
verb 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要讓客戶端連線時自動輸入帳號密碼可以在客戶端conf中的&lt;code&gt;auth-user-pass&lt;/code&gt; 結尾加上 &lt;code&gt;檔案名稱+副檔名&lt;/code&gt;&lt;br&gt;&lt;code&gt;auth-user-pass account.txt&lt;/code&gt;&lt;br&gt;並在同一個目錄底下新增一個account的txt檔&lt;br&gt;在第一行打上帳號，第二行打上密碼儲存即可&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="OpenVPN" scheme="https://blog.kawai.moe/tags/OpenVPN/" />
        <updated>2019-06-02T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/centos-%E6%9B%B4%E6%96%B0kernel/</id>
        <title>CentOS 更新Kernel</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/centos-%E6%9B%B4%E6%96%B0kernel/"/>
        <content type="html">&lt;p&gt;1.導入 Public Key&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.安裝 ELRepo&lt;/p&gt;
&lt;p&gt;CentOS 5&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-5-5.el5.elrepo.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CentOS6&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CentOS7&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.升級 Kernel&lt;/p&gt;
&lt;p&gt;※在 ELRepo 中有兩個內核選項，一個是 kernel-lt(長期支持版本)，一個是 kernel-ml(主線最新版本)&lt;/p&gt;
&lt;p&gt;kernel-lt&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum --enablerepo=elrepo-kernel install kernel-lt -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;kernel-ml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum --enablerepo=elrepo-kernel install kernel-ml -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.更改 Grub&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/grub.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根據安裝好以後的內核位置，修改 default 的值，一般是修改為0，因為 default 從 0 開始，一般新安裝的內核在第一個位置，所以設置&lt;br&gt;default&amp;#x3D;0&lt;/p&gt;
&lt;p&gt;5.查看 Kernel&lt;/p&gt;
&lt;p&gt;重啟主機，重啟後執行&lt;br&gt;&lt;code&gt;uname -r&lt;/code&gt;&lt;br&gt;，查看內核版本號，判斷是否升級成功&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="CentOS" scheme="https://blog.kawai.moe/tags/CentOS/" />
        <category term="Kernel" scheme="https://blog.kawai.moe/tags/Kernel/" />
        <updated>2019-06-02T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/ssh-%E4%BD%BF%E7%94%A8-key-%E7%99%BB%E5%85%A5/</id>
        <title>SSH 使用 key 登入</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/ssh-%E4%BD%BF%E7%94%A8-key-%E7%99%BB%E5%85%A5/"/>
        <content type="html">&lt;p&gt;一般ssh會使用帳號跟密碼的方式登入遠端主機，這方式雖然方便但是卻有風險&lt;/p&gt;
&lt;p&gt;只要其他人知道帳號跟密碼一樣就可以登入主機進行任何動作，所以可以使用key來登入，只要沒有這個key就不能登入主機，這樣也比帳號密碼安全。&lt;/p&gt;
&lt;p&gt;而其實它還有另一種用途，如果要用rsync備份或更新其他主機的內容也可以用這個方式，就不用一台一台主機輸入密碼才能傳輸檔案。&lt;/p&gt;
&lt;h1 id=&#34;1-製作ssh-key&#34;&gt;&lt;a href=&#34;#1-製作ssh-key&#34; class=&#34;headerlink&#34; title=&#34;1.製作ssh key&#34;&gt;&lt;/a&gt;1.製作ssh key&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa &lt;/code&gt; 或 &lt;code&gt;ssh-keygen -d (dsa)&lt;/code&gt;&amp;#x3D;&amp;gt; 產生出 id_rsa, id_rsa.pub在使用者目錄中.ssh資料夾裡面&lt;/p&gt;
&lt;p&gt;製作時會問 Enter passphrase (empty for no passphrase): 此處直接 enter 跳過,下次才不會詢問密碼&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id_rsa&lt;/code&gt; 是私鑰 private key&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id_rsa.pub&lt;/code&gt; 是公鑰 public key&lt;/p&gt;
&lt;h1 id=&#34;2-讓遠端登入到其他遠端主機&#34;&gt;&lt;a href=&#34;#2-讓遠端登入到其他遠端主機&#34; class=&#34;headerlink&#34; title=&#34;2.讓遠端登入到其他遠端主機&#34;&gt;&lt;/a&gt;2.讓遠端登入到其他遠端主機&lt;/h1&gt;&lt;p&gt;假如現在你有 A 跟 B 主機，A 主機照上方的方式做出了ssh金鑰&lt;/p&gt;
&lt;p&gt;主要要讓 &lt;strong&gt;A 主機&lt;/strong&gt; 可以不用使用密碼用 key 登入到 &lt;strong&gt;B 主機&lt;/strong&gt; 進行操作&lt;/p&gt;
&lt;p&gt;那就要將 &lt;strong&gt;A 主機&lt;/strong&gt; 的 “&lt;strong&gt;公鑰&lt;/strong&gt;“ 上傳到 &lt;strong&gt;B 主機&lt;/strong&gt; 中才能讓 A主機免密碼登入到 B 主機，只要在 A 主機輸入以下指令&lt;/p&gt;
&lt;p&gt;ssh-copy-id -i $HOME&amp;#x2F;.ssh&amp;#x2F;id_rsa.pub (B主機)&lt;br&gt;上方紅字的部分改為主機IP或名稱&lt;/p&gt;
&lt;p&gt;大致上主機回應如下方：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ssh-copy-id -i $HOME/.ssh/id_rsa.pub (主機名稱)
The authenticity of host &amp;#39;(主機名稱) (IP)&amp;#39; can’t be established.
RSA key fingerprint is 金鑰指紋.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &amp;#39;(主機名稱),(IP)&amp;#39; (RSA) to the list of known hosts.
Now try logging into the machine, with &amp;quot;ssh &amp;#39;(主機名稱)&amp;#39;&amp;quot;, and check in:

.ssh/authorized_keys

to make sure we haven’t added extra keys that you weren’t expecting.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;※(主機名稱),(IP) 部分會依金鑰及主機名稱IP而改變&lt;/p&gt;
&lt;p&gt;這個時候用 ssh 連線嘗試看看有沒有匯入成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh root@主機名稱
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果有成功匯入金鑰的話不用打密碼就可以連線進去了&lt;/p&gt;
&lt;h1 id=&#34;3-本地電腦免密碼登入遠端主機&#34;&gt;&lt;a href=&#34;#3-本地電腦免密碼登入遠端主機&#34; class=&#34;headerlink&#34; title=&#34;3.本地電腦免密碼登入遠端主機&#34;&gt;&lt;/a&gt;3.本地電腦免密碼登入遠端主機&lt;/h1&gt;&lt;p&gt;當我們用 windows 要遠端控制主機時大部分都會使用到 PieTTY 或 PuTTY 這兩款 SSH 連線軟體，平常設定都是使用帳號跟密碼做登入，如果要用免密碼登入增加安全性就要使用下方的方式&lt;/p&gt;
&lt;p&gt;(1) 準備好 PieTTY 或 PuTTY (觀眾：廢話(打丁丁&lt;/p&gt;
&lt;p&gt;(2) 將遠端主機使用者的 &lt;strong&gt;公鑰&lt;/strong&gt; 重新命名成 &lt;code&gt;authorized_keys&lt;/code&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(3) 將 id_rsa 私鑰 private key 下載到 windows 上&lt;/p&gt;
&lt;p&gt;並下載 PuTTYgen ，開啟 PuTTYgen 上方有個 “Conversions” 選擇 “Import key” 選擇你從主機下載下來的 &lt;strong&gt;id_rsa私鑰&lt;/strong&gt;，選擇後點擊下方會有個 “Save private key”，&lt;/p&gt;
&lt;p&gt;軟體會問你說&lt;code&gt;Are you sure you want to save this key without passphrase to protext it?&lt;/code&gt;，主要的意思是說”你確定要儲存這個key並不使用任何密碼保護它?”&lt;/p&gt;
&lt;p&gt;選擇 yes 輸出 ppk 檔，ppk 檔是給PuTTY or PieTTY使用的，給 PuTTY or PieTTY ppk 檔路徑就可以免密碼登入囉~&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="SSH" scheme="https://blog.kawai.moe/tags/SSH/" />
        <updated>2019-06-02T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/apache-%E9%80%8F%E9%81%8E-itk-multi-processing-module-%E8%AE%93%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F%E4%BB%A5%E4%B8%8D%E5%90%8C%E4%BD%BF%E7%94%A8%E8%80%85%E5%9F%B7%E8%A1%8C/</id>
        <title>Apache 透過 ITK Multi-Processing Module 讓虛擬主機以不同使用者執行</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/apache-%E9%80%8F%E9%81%8E-itk-multi-processing-module-%E8%AE%93%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F%E4%BB%A5%E4%B8%8D%E5%90%8C%E4%BD%BF%E7%94%A8%E8%80%85%E5%9F%B7%E8%A1%8C/"/>
        <content type="html">&lt;p&gt;一般來說 Linux Apache 服務啟動時，預設都是限定一組使用者與群組來執行程序（CentOS 是 apache ，Ubuntu 是 www-data）。&lt;/p&gt;
&lt;p&gt;但有時我們常透過VirtualHost在同一個 Apache 上存放著許多網站。&lt;/p&gt;
&lt;p&gt;這樣子有些網站的權限可能就有問題，可能會導致網頁無法下載或上傳檔案等等，對於主機上的網站也有安全性的問題，所以這裡使用 MPM 來指定 Apache VirtualHost 程序的使用者與群組。&lt;/p&gt;
&lt;p&gt;以下操作皆為CentOS 6.8&lt;/p&gt;
&lt;p&gt;1.安裝mpm-itk 套件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;yum install httpd-itk -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.編輯 &amp;#x2F;etc&amp;#x2F;sysconfig&amp;#x2F;httpd 指定用 httpd.itk 來執行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;vi /etc/sysconfig/httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;並加入以下設定(後方為httpd.itk的絕對路徑，可以使用find去完整蒐尋位置)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTPD=/usr/sbin/httpd.itk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.編輯 &amp;#x2F;etc&amp;#x2F;httpd&amp;#x2F;conf.d&amp;#x2F;php.conf 載入 PHP Module&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi /etc/httpd/conf.d/php.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;並加入以下設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule itk.c&amp;gt;
LoadModule php5_module modules/libphp5.so
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.編輯 Virtual Host 設定檔，透過 AssignUserID 參數設定 Apache 程序的使用者與群組，範例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
DocumentRoot (網頁根目錄)
ServerName (VirtualHost 名稱)
ErrorLog logs (ErrorLog 存放檔案路徑)
CustomLog logs (CustomLog 存放檔案路徑)
AssignUserId (使用者名稱) (群組)
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最重要的就是 AssignUserId (使用者名稱) (群組)&lt;/p&gt;
&lt;p&gt;名稱及群組中間有一個空格，設定完後重新啟動Apache&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;service httpd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不知道有沒有正確的套用執行請在網頁根目錄中放一個php網頁，內容為：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
echo shell_exec(&amp;quot;whoami&amp;quot;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這會顯示執行php的使用者名稱，看是不是你設定 AssignUserId 的使用者名稱。&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="Apache" scheme="https://blog.kawai.moe/tags/Apache/" />
        <category term="VirtualHost" scheme="https://blog.kawai.moe/tags/VirtualHost/" />
        <category term="Multi-Processing" scheme="https://blog.kawai.moe/tags/Multi-Processing/" />
        <updated>2019-05-30T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/linux-python3-7-%E5%9F%B7%E8%A1%8C-pip-%E6%99%82-sslerror-%E9%8C%AF%E8%AA%A4/</id>
        <title>Linux Python3.7+ 執行 pip 時 SSLError 錯誤</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/linux-python3-7-%E5%9F%B7%E8%A1%8C-pip-%E6%99%82-sslerror-%E9%8C%AF%E8%AA%A4/"/>
        <content type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/cover/hotlink-ok/python37-pip-ssl-error.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在用 Centos7 安裝 Python3.7+ 一般來說都沒有任何的問題&lt;/p&gt;
&lt;p&gt;只要從原始碼編譯安裝就可以直接使用 Python3.7+ 了&lt;/p&gt;
&lt;p&gt;但是如果要用 pip 安裝(搜尋)套件的時候就會發生錯誤&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/python37-pip-ssl-error.png&#34; alt=&#34;pip-sslerror&#34;&gt;&lt;/p&gt;
&lt;p&gt;學長之前有問過我這個問題，想不到自己也碰到了&lt;/p&gt;
&lt;p&gt;雖然學長的做法是把 Python 的版本下降到 3.6 解決這個問題&lt;/p&gt;
&lt;p&gt;但是因為 3.6 跟 3.7 在 async&amp;#x2F;await 的寫法上不一樣&lt;/p&gt;
&lt;p&gt;3.7 的寫法比起 3.6 更精簡，所以才想要在自己的伺服器上配置 Python3.7&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/python-version.png&#34; alt=&#34;python多版本&#34;&gt;&lt;br&gt;(很多 Linux 自帶 Python2 而 3 之後的版本都要自行安裝)&lt;/p&gt;
&lt;p&gt;然後如果編譯安裝會跳出以下提示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;Python build finished successfully!
The necessary bits to build these optional modules were not found:
_ssl _uuid 
To find the necessary bits, look in setup.py in detect_modules() for the module&amp;#39;s name.
Could not build the ssl module! 
Python requires an OpenSSL 1.0.2 or 1.1 compatible libssl with X509_VERIFY_PARAM_set1_host(). 
LibreSSL 2.6.4 and earlier do not provide the 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後查了 Centos7 的 openssl 版本….&lt;/p&gt;
&lt;p&gt;恩…很好 1.0.2k 照理說是符合的&lt;/p&gt;
&lt;p&gt;結果就是文字遊戲，上述的提示是指 openssl 版本要”&lt;strong&gt;超過&lt;/strong&gt;“ 1.0.2 或 1.1&lt;/p&gt;
&lt;p&gt;並不是說最低要求 1.0.2 or 1.1&lt;/p&gt;
&lt;p&gt;所以從 openssl 下載最新的版本 openssl-1.1.1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 下載 openssl-1.1.1 原始碼
# 更多版本請直接到 https://www.openssl.org/source/ 查看
wget https://www.openssl.org/source/openssl-1.1.1.tar.gz

# 下載編譯時所需要的套件
yum install -y zlib zlib-devel openssl-devel sqlite-devel bzip2-devel libffi libffi-devel gcc gcc-c++

# 解壓編譯下載的 openssl 
tar zxf openssl-1.1.1.tar.gz 
cd openssl-1.1.1 
./config shared zlib --prefix=/usr/local/openssl
make
make install
mv /usr/bin/openssl /usr/bin/openssl.bak 
mv /usr/include/openssl /usr/include/openssl.bak 
ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl 
ln -s /usr/local/openssl/include/openssl /usr/include/openssl 
echo &amp;quot;/usr/local/openssl/lib&amp;quot; &amp;gt;&amp;gt; /etc/ld.so.conf 
ldconfig -v
# 安裝好 openssl 1.1.1 之後要重新編譯 Python
./configure --prefix=/user/local/python37 --with-openssl=/usr/local/openssl
# 在 make 之後有可能發生錯誤 https://bugs.python.org/issue30090
# 簡單解釋是: 
# make 完成之後發現回傳訊息如下
#     Failed to build these modules:
#         _ctypes
# 此時就要安裝必要套件
# Centos: yum install -y libffi libffi-devel
# Ubuntu: apt-get install libffi-dev
# 安裝完成後再重新 make 一次就不會有錯誤了
make 
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;編譯安裝好之後應該就可以執行 pip 不會出現 SSLError 錯誤了&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/pip-install-success.png&#34; alt=&#34;成功執行pip&#34;&gt;&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Python" scheme="https://blog.kawai.moe/tags/Python/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="SSLError" scheme="https://blog.kawai.moe/tags/SSLError/" />
        <category term="pip" scheme="https://blog.kawai.moe/tags/pip/" />
        <updated>2019-05-19T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/linux/webmin-%E5%95%9F%E7%94%A8-two-factor-authentication/</id>
        <title>Webmin 啟用 Two Factor Authentication</title>
        <link rel="alternate" href="https://blog.kawai.moe/linux/webmin-%E5%95%9F%E7%94%A8-two-factor-authentication/"/>
        <content type="html">&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/cover/hotlink-ok/WebminXTwoFactor.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Webmin Two Factor Authentication Authen::OATH&lt;br&gt;這個問題從我一開始接觸到 Webmin 到現在都沒有解決的問題，所以這邊從其他方式去修復這個問題讓使用者可以用 Two Factor Authentication。  &lt;/p&gt;
&lt;p&gt;安裝 Webmin 後，為了增加你的 Webmin 的安全性&lt;br&gt;可以通過設定 Webmin Two Factor Authentication 輕鬆達成&lt;/p&gt;
&lt;p&gt;但是 Webmin 上安裝會產生許多不同的錯誤&lt;br&gt;其中一個令人惱火的是 Authen :: OATH perl 模塊錯誤  &lt;/p&gt;
&lt;p&gt;當選擇 &lt;code&gt;Google Authentication&lt;/code&gt; 並按 &lt;code&gt;下一步&lt;/code&gt; 時，您可能會遇到以下錯誤&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/linux/post/webmin_oath_perl_issue.png&#34; alt=&#34;webmin_oath_perl_issue&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果點擊連結 &lt;code&gt;Perl Modules&lt;/code&gt; 將從原始碼安裝它，但是再次可能存在其他依賴項錯誤&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Can&amp;#39;t locate ExtUtils/MakeMaker.pm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後就開始無限迴圈了，不管怎麼案都會卡在這兩個動作&lt;br&gt;原因很簡單，可以是以下任何一個或全部  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缺少像Moose，Digest或Build包這樣的Perl模塊。&lt;/li&gt;
&lt;li&gt;Authen :: OATH未正確安裝。&lt;/li&gt;
&lt;li&gt;安裝OATH後，您沒有重新啟動Webmin核心。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最後一個主要問題，因為 Authen::OATH 是從原始碼安裝的&lt;br&gt;除非重新啟動核心，否則 Webmin 將無法檢測到它&lt;br&gt;安裝 Authen::OATH 後嘗試使用 SSH 重啟 Webmin 服務，問題應該得到解決。&lt;br&gt;如果沒有，請按照以下步驟正確安裝  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安裝Perl包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum install gcc &amp;#39;perl(Moose)&amp;#39; &amp;#39;perl(Digest::HMAC)&amp;#39; &amp;#39;perl(Module::Build)&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這將為 Source 構建安裝所有必需的 perl 包，並支持 WebMin 雙因素身份驗證。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果收到錯誤 &lt;code&gt;No package perl（Moose）available&lt;/code&gt;，請通過此下方從 tar 包安裝 perl-Moose&lt;br&gt;下載 Authen :: OATH 原始碼並解壓縮&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 下載
wget http://www.cpan.org/authors/id/S/SI/SIFUKURT/Authen-OATH-v1.0.0.tar.gz

# 解壓縮
tar -xvf Authen-OATH-v1.0.0.tar.gz

# 切換到該目錄
cd Authen-OATH-v1.0.0

# 逐個輸入這些命令
perl Build.PL
./Build
./Build test
./Build install

# 最後重新啟動 webmin
/etc/webmin/restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後再次回到Webmin設定就可以正常使用Two Factor Authentication&lt;/p&gt;
</content>
        <category term="linux" scheme="https://blog.kawai.moe/categories/linux/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <category term="Webmin" scheme="https://blog.kawai.moe/tags/Webmin/" />
        <category term="2FA" scheme="https://blog.kawai.moe/tags/2FA/" />
        <category term="Two Factor Authentication" scheme="https://blog.kawai.moe/tags/Two-Factor-Authentication/" />
        <updated>2019-05-16T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.kawai.moe/python/pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86/</id>
        <title>pyinstaller: lib not found 報錯處理</title>
        <link rel="alternate" href="https://blog.kawai.moe/python/pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86/"/>
        <content type="html">&lt;p&gt;使用 pyinstaller 打包 py 檔時&lt;br&gt;發生非常多的 WARNING: lib not found: api-ms-win-crt-*.dll  &lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-1.png&#34; alt=&#34;2019-05-16-pyinstaller.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;那要如何解決這個問題呢?&lt;/p&gt;
&lt;p&gt;一般開發者在 Windows 使用 Python 是不會用虛擬環境(virtualenv)&lt;/p&gt;
&lt;p&gt;但這邊我是有使用虛擬環境，但操作差不多~&lt;/p&gt;
&lt;p&gt;假如今天我們要打包一個名為 &lt;code&gt;app.py&lt;/code&gt; 這個檔案&lt;/p&gt;
&lt;p&gt;我們要先建立 &lt;code&gt;app.py&lt;/code&gt; 的 spec 檔&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pyi-makespec app.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之後打開 &lt;code&gt;app.spec&lt;/code&gt; 如下圖&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-2.png&#34; alt=&#34;2019-05-16-pyinstaller.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;紅色框起來就是對於我們打包來說比較重要的幾個參數&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pathex&lt;/code&gt;        : 打包時要用到的檔案之環境路徑&lt;br&gt;&lt;code&gt;datas&lt;/code&gt;         : 打包完成後程式會使用到的檔案&lt;br&gt;&lt;code&gt;hiddenimports&lt;/code&gt; : 手動 import 該程式會使用到的 lib 或者自己寫的 modules&lt;/p&gt;
&lt;p&gt;要解決 lib not found 的問題就是要 &lt;code&gt;pathex&lt;/code&gt; 這個&lt;br&gt;在加入路徑前我們要先安裝 &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk&#34;&gt;Windows SDK&lt;/a&gt;&lt;br&gt;因為 Windows 本身沒有內建這些 dll 檔&lt;/p&gt;
&lt;p&gt;安裝完成後到你的安裝目錄 (這邊因人而異，也有可能因版本不同所以有些出入)&lt;br&gt;&lt;code&gt;C:\Program Files (x86)\Windows Kits\10\Redist\10.0.18362.0\ucrt\DLLs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;到這個路徑之後會看到有 &lt;code&gt;x64&lt;/code&gt; , &lt;code&gt;x86&lt;/code&gt; , &lt;code&gt;arm&lt;/code&gt; 三個資料夾&lt;br&gt;接著就是依照你的 python 版本去選擇資料夾&lt;br&gt;因為我的 python 是 64bit 所以我就選擇 x64&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;app.spec&lt;/code&gt; 中的 &lt;code&gt;pathex&lt;/code&gt; 加入該路徑如下圖&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/assets/images/python/post/2019-05-16-pyinstaller-lib-not-found-%E5%A0%B1%E9%8C%AF%E8%99%95%E7%90%86-3.png&#34; alt=&#34;2019-05-16-pyinstaller.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著要打包的指令不要傻傻的把 py 檔帶進去&lt;br&gt;pyinstaller 預設如果是帶 py 檔進去就會重新生成 spec 檔&lt;/p&gt;
&lt;p&gt;所以我們要打的指令是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pyinstaller app.spec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就會讀取 app.spec 的內容將 py 檔打包成 exe 然後這樣就不會噴錯啦~&lt;/p&gt;
</content>
        <category term="python" scheme="https://blog.kawai.moe/categories/python/" />
        <category term="Python" scheme="https://blog.kawai.moe/tags/Python/" />
        <category term="PyInstaller" scheme="https://blog.kawai.moe/tags/PyInstaller/" />
        <category term="Linux" scheme="https://blog.kawai.moe/tags/Linux/" />
        <updated>2019-05-15T16:00:00.000Z</updated>
    </entry>
</feed>
